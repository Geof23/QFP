
test.mic.O0:     file format elf64-k1om

xo
Disassembly of section .init:

0000000000400858 <_init>:
  400858:	48 83 ec 08          	sub    $0x8,%rsp
  40085c:	e8 1b 01 00 00       	callq  40097c <call_gmon_start>
  400861:	e8 7a 01 00 00       	callq  4009e0 <frame_dummy>
  400866:	e8 19 07 00 00       	callq  400f84 <__do_global_ctors_aux>
  40086b:	48 83 c4 08          	add    $0x8,%rsp
  40086f:	c3                   	retq   

Disassembly of section .plt:

0000000000400870 <std::ostream::operator<<(double)@plt-0x10>:
  400870:	ff 35 a2 0c 20 00    	pushq  0x200ca2(%rip)        # 601518 <_GLOBAL_OFFSET_TABLE_+0x8>
  400876:	ff 25 a4 0c 20 00    	jmpq   *0x200ca4(%rip)        # 601520 <_GLOBAL_OFFSET_TABLE_+0x10>
  40087c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400880 <std::ostream::operator<<(double)@plt>:
  400880:	ff 25 a2 0c 20 00    	jmpq   *0x200ca2(%rip)        # 601528 <_GLOBAL_OFFSET_TABLE_+0x18>
  400886:	68 00 00 00 00       	pushq  $0x0
  40088b:	e9 e0 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400890 <std::__throw_bad_cast()@plt>:
  400890:	ff 25 9a 0c 20 00    	jmpq   *0x200c9a(%rip)        # 601530 <_GLOBAL_OFFSET_TABLE_+0x20>
  400896:	68 01 00 00 00       	pushq  $0x1
  40089b:	e9 d0 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008a0 <std::ctype<char>::_M_widen_init() const@plt>:
  4008a0:	ff 25 92 0c 20 00    	jmpq   *0x200c92(%rip)        # 601538 <_GLOBAL_OFFSET_TABLE_+0x28>
  4008a6:	68 02 00 00 00       	pushq  $0x2
  4008ab:	e9 c0 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008b0 <std::ios_base::Init::Init()@plt>:
  4008b0:	ff 25 8a 0c 20 00    	jmpq   *0x200c8a(%rip)        # 601540 <_GLOBAL_OFFSET_TABLE_+0x30>
  4008b6:	68 03 00 00 00       	pushq  $0x3
  4008bb:	e9 b0 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008c0 <std::ostream::operator<<(long double)@plt>:
  4008c0:	ff 25 82 0c 20 00    	jmpq   *0x200c82(%rip)        # 601548 <_GLOBAL_OFFSET_TABLE_+0x38>
  4008c6:	68 04 00 00 00       	pushq  $0x4
  4008cb:	e9 a0 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008d0 <__libc_start_main@plt>:
  4008d0:	ff 25 7a 0c 20 00    	jmpq   *0x200c7a(%rip)        # 601550 <_GLOBAL_OFFSET_TABLE_+0x40>
  4008d6:	68 05 00 00 00       	pushq  $0x5
  4008db:	e9 90 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008e0 <std::ios_base::Init::~Init()@plt>:
  4008e0:	ff 25 72 0c 20 00    	jmpq   *0x200c72(%rip)        # 601558 <_GLOBAL_OFFSET_TABLE_+0x48>
  4008e6:	68 06 00 00 00       	pushq  $0x6
  4008eb:	e9 80 ff ff ff       	jmpq   400870 <_init+0x18>

00000000004008f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
  4008f0:	ff 25 6a 0c 20 00    	jmpq   *0x200c6a(%rip)        # 601560 <_GLOBAL_OFFSET_TABLE_+0x50>
  4008f6:	68 07 00 00 00       	pushq  $0x7
  4008fb:	e9 70 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400900 <__cxa_atexit@plt>:
  400900:	ff 25 62 0c 20 00    	jmpq   *0x200c62(%rip)        # 601568 <_GLOBAL_OFFSET_TABLE_+0x58>
  400906:	68 08 00 00 00       	pushq  $0x8
  40090b:	e9 60 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400910 <std::ostream::operator<<(float)@plt>:
  400910:	ff 25 5a 0c 20 00    	jmpq   *0x200c5a(%rip)        # 601570 <_GLOBAL_OFFSET_TABLE_+0x60>
  400916:	68 09 00 00 00       	pushq  $0x9
  40091b:	e9 50 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400920 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
  400920:	ff 25 52 0c 20 00    	jmpq   *0x200c52(%rip)        # 601578 <_GLOBAL_OFFSET_TABLE_+0x68>
  400926:	68 0a 00 00 00       	pushq  $0xa
  40092b:	e9 40 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400930 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  400930:	ff 25 4a 0c 20 00    	jmpq   *0x200c4a(%rip)        # 601580 <_GLOBAL_OFFSET_TABLE_+0x70>
  400936:	68 0b 00 00 00       	pushq  $0xb
  40093b:	e9 30 ff ff ff       	jmpq   400870 <_init+0x18>

0000000000400940 <__gxx_personality_v0@plt>:
  400940:	ff 25 42 0c 20 00    	jmpq   *0x200c42(%rip)        # 601588 <_GLOBAL_OFFSET_TABLE_+0x78>
  400946:	68 0c 00 00 00       	pushq  $0xc
  40094b:	e9 20 ff ff ff       	jmpq   400870 <_init+0x18>

Disassembly of section .text:

0000000000400950 <_start>:
  400950:	31 ed                	xor    %ebp,%ebp
  400952:	49 89 d1             	mov    %rdx,%r9
  400955:	5e                   	pop    %rsi
  400956:	48 89 e2             	mov    %rsp,%rdx
  400959:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40095d:	50                   	push   %rax
  40095e:	54                   	push   %rsp
  40095f:	49 c7 c0 80 0f 40 00 	mov    $0x400f80,%r8
  400966:	48 c7 c1 20 0f 40 00 	mov    $0x400f20,%rcx
  40096d:	48 c7 c7 04 0a 40 00 	mov    $0x400a04,%rdi
  400974:	e8 57 ff ff ff       	callq  4008d0 <__libc_start_main@plt>
  400979:	f4                   	hlt    
  40097a:	66 90                	xchg   %ax,%ax

000000000040097c <call_gmon_start>:
  40097c:	48 83 ec 08          	sub    $0x8,%rsp
  400980:	48 8b 05 81 0b 20 00 	mov    0x200b81(%rip),%rax        # 601508 <_DYNAMIC+0x1d0>
  400987:	48 85 c0             	test   %rax,%rax
  40098a:	74 02                	je     40098e <call_gmon_start+0x12>
  40098c:	ff d0                	callq  *%rax
  40098e:	48 83 c4 08          	add    $0x8,%rsp
  400992:	c3                   	retq   
  400993:	90                   	nop

0000000000400994 <__do_global_dtors_aux>:
  400994:	55                   	push   %rbp
  400995:	48 89 e5             	mov    %rsp,%rbp
  400998:	53                   	push   %rbx
  400999:	52                   	push   %rdx
  40099a:	80 3d 0f 0d 20 00 00 	cmpb   $0x0,0x200d0f(%rip)        # 6016b0 <completed.5565>
  4009a1:	75 39                	jne    4009dc <__do_global_dtors_aux+0x48>
  4009a3:	b8 28 13 60 00       	mov    $0x601328,%eax
  4009a8:	48 2d 20 13 60 00    	sub    $0x601320,%rax
  4009ae:	48 c1 f8 03          	sar    $0x3,%rax
  4009b2:	48 8d 58 ff          	lea    -0x1(%rax),%rbx
  4009b6:	eb 11                	jmp    4009c9 <__do_global_dtors_aux+0x35>
  4009b8:	48 ff c2             	inc    %rdx
  4009bb:	48 89 15 f6 0c 20 00 	mov    %rdx,0x200cf6(%rip)        # 6016b8 <dtor_idx.5567>
  4009c2:	ff 14 d5 20 13 60 00 	callq  *0x601320(,%rdx,8)
  4009c9:	48 8b 15 e8 0c 20 00 	mov    0x200ce8(%rip),%rdx        # 6016b8 <dtor_idx.5567>
  4009d0:	48 39 da             	cmp    %rbx,%rdx
  4009d3:	72 e3                	jb     4009b8 <__do_global_dtors_aux+0x24>
  4009d5:	c6 05 d4 0c 20 00 01 	movb   $0x1,0x200cd4(%rip)        # 6016b0 <completed.5565>
  4009dc:	58                   	pop    %rax
  4009dd:	5b                   	pop    %rbx
  4009de:	5d                   	pop    %rbp
  4009df:	c3                   	retq   

00000000004009e0 <frame_dummy>:
  4009e0:	55                   	push   %rbp
  4009e1:	48 83 3d 47 09 20 00 	cmpq   $0x0,0x200947(%rip)        # 601330 <__JCR_END__>
  4009e8:	00 
  4009e9:	48 89 e5             	mov    %rsp,%rbp
  4009ec:	74 12                	je     400a00 <frame_dummy+0x20>
  4009ee:	b8 00 00 00 00       	mov    $0x0,%eax
  4009f3:	48 85 c0             	test   %rax,%rax
  4009f6:	74 08                	je     400a00 <frame_dummy+0x20>
  4009f8:	5d                   	pop    %rbp
  4009f9:	bf 30 13 60 00       	mov    $0x601330,%edi
  4009fe:	ff e0                	jmpq   *%rax
  400a00:	5d                   	pop    %rbp
  400a01:	c3                   	retq   
  400a02:	66 90                	xchg   %ax,%ax

0000000000400a04 <main>:
  400a04:	55                   	push   %rbp
  400a05:	48 89 e5             	mov    %rsp,%rbp
  400a08:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  400a0f:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
  400a16:	48 03 05 83 0b 20 00 	add    0x200b83(%rip),%rax        # 6015a0 <__bss_start>
  400a1d:	ba a0 15 60 00       	mov    $0x6015a0,%edx
  400a22:	48 03 10             	add    (%rax),%rdx
  400a25:	b8 c8 00 00 00       	mov    $0xc8,%eax
  400a2a:	48 89 d7             	mov    %rdx,%rdi
  400a2d:	48 89 c6             	mov    %rax,%rsi
  400a30:	e8 0f 04 00 00       	callq  400e44 <std::ios_base::precision(long)>
  400a35:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  400a3c:	b8 01 00 00 00       	mov    $0x1,%eax
  400a41:	c5 f8 92 c8          	kmov   %eax,%k1
  400a45:	62 f2 79 09 18 05 21 	vbroadcastss 0x621(%rip),%zmm0{%k1}        # 401070 <_IO_stdin_used+0xb0>
  400a4c:	06 00 00 
  400a4f:	b8 01 00 00 00       	mov    $0x1,%eax
  400a54:	c5 f8 92 c8          	kmov   %eax,%k1
  400a58:	62 f2 79 09 d1 45 f8 	vpackstorelps %zmm0,-0x20(%rbp){%k1}
  400a5f:	b8 01 00 00 00       	mov    $0x1,%eax
  400a64:	c5 f8 92 c8          	kmov   %eax,%k1
  400a68:	62 f2 79 09 18 05 02 	vbroadcastss 0x602(%rip),%zmm0{%k1}        # 401074 <_IO_stdin_used+0xb4>
  400a6f:	06 00 00 
  400a72:	b8 01 00 00 00       	mov    $0x1,%eax
  400a77:	c5 f8 92 c8          	kmov   %eax,%k1
  400a7b:	62 f2 79 09 d1 45 f9 	vpackstorelps %zmm0,-0x1c(%rbp){%k1}
  400a82:	b8 a0 15 60 00       	mov    $0x6015a0,%eax
  400a87:	ba 80 10 40 00       	mov    $0x401080,%edx
  400a8c:	48 89 c7             	mov    %rax,%rdi
  400a8f:	48 89 d6             	mov    %rdx,%rsi
  400a92:	e8 59 fe ff ff       	callq  4008f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400a97:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  400a9e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400aa5:	ba 01 00 00 00       	mov    $0x1,%edx
  400aaa:	c5 f8 92 ca          	kmov   %edx,%k1
  400aae:	62 f2 79 09 18 45 f8 	vbroadcastss -0x20(%rbp),%zmm0{%k1}
  400ab5:	ba 01 00 00 00       	mov    $0x1,%edx
  400aba:	c5 f8 92 ca          	kmov   %edx,%k1
  400abe:	62 f2 79 09 18 4d f9 	vbroadcastss -0x1c(%rbp),%zmm1{%k1}
  400ac5:	ba 01 00 00 00       	mov    $0x1,%edx
  400aca:	c5 f8 92 ca          	kmov   %edx,%k1
  400ace:	62 f2 79 08 5a 1d 68 	vbroadcasti32x4 0x568(%rip),%zmm3        # 401040 <_IO_stdin_used+0x80>
  400ad5:	05 00 00 
  400ad8:	62 f1 59 08 ef e4    	vpxord %zmm4,%zmm4,%zmm4
  400ade:	62 f2 79 08 58 2d 90 	vpbroadcastd 0x590(%rip),%zmm5        # 401078 <_IO_stdin_used+0xb8>
  400ae5:	05 00 00 
  400ae8:	62 f2 71 09 55 e5    	vfixupnanps %zmm5,%zmm1,%zmm4{%k1}
  400aee:	62 f2 79 09 55 e5    	vfixupnanps %zmm5,%zmm0,%zmm4{%k1}
  400af4:	62 f1 58 09 c2 d4 00 	vcmpeqps %zmm4,%zmm4,%k2{%k1}
  400afb:	c5 f8 90 da          	kmov   %k2,%k3
  400aff:	c5 f8 42 d9          	kandn  %k1,%k3
  400b03:	62 f3 79 09 26 e1 00 	vgetmantps $0x0,%zmm1,%zmm4{%k1}
  400b0a:	62 f2 79 09 ca ec    	vrcp23ps %zmm4,%zmm5{%k1}
  400b10:	62 f1 78 48 28 db    	vmovaps %zmm3{aaaa},%zmm3
  400b16:	62 f2 51 c9 ac e3    	vfnmadd213ps {rn-sae},%zmm3,%zmm5,%zmm4{%k1}
  400b1c:	62 f2 59 c9 a8 ed    	vfmadd213ps {rn-sae},%zmm5,%zmm4,%zmm5{%k1}
  400b22:	62 f2 79 09 42 d9    	vgetexpps %zmm1,%zmm3{%k1}
  400b28:	62 f2 79 09 42 e0    	vgetexpps %zmm0,%zmm4{%k1}
  400b2e:	62 f1 58 09 5c f3    	vsubps %zmm3,%zmm4,%zmm6{%k1}
  400b34:	62 f3 79 09 cb de 00 	vcvtfxpntps2dq $0x0,%zmm6,%zmm3{%k1}
  400b3b:	62 f3 79 09 26 e0 00 	vgetmantps $0x0,%zmm0,%zmm4{%k1}
  400b42:	62 f1 58 ca 59 f5    	vmulps {rn-sae},%zmm5,%zmm4,%zmm6{%k2}
  400b48:	62 f2 79 08 58 25 2a 	vpbroadcastd 0x52a(%rip),%zmm4        # 40107c <_IO_stdin_used+0xbc>
  400b4f:	05 00 00 
  400b52:	62 f2 71 09 55 cc    	vfixupnanps %zmm4,%zmm1,%zmm1{%k1}
  400b58:	62 f1 78 cb 59 f1    	vmulps {rn-sae},%zmm1,%zmm0,%zmm6{%k3}
  400b5e:	62 f2 49 8a 84 f3    	vscaleps {rn},%zmm3,%zmm6,%zmm6{%k2}
  400b64:	62 f1 78 09 28 d6    	vmovaps %zmm6,%zmm2{%k1}
  400b6a:	48 89 c7             	mov    %rax,%rdi
  400b6d:	62 f1 78 08 28 c2    	vmovaps %zmm2,%zmm0
  400b73:	e8 98 fd ff ff       	callq  400910 <std::ostream::operator<<(float)@plt>
  400b78:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  400b7c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  400b80:	ba 30 09 40 00       	mov    $0x400930,%edx
  400b85:	48 89 c7             	mov    %rax,%rdi
  400b88:	48 89 d6             	mov    %rdx,%rsi
  400b8b:	e8 90 fd ff ff       	callq  400920 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  400b90:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  400b94:	b8 01 00 00 00       	mov    $0x1,%eax
  400b99:	c5 f8 92 c8          	kmov   %eax,%k1
  400b9d:	62 f2 f9 09 19 05 b9 	vbroadcastsd 0x4b9(%rip),%zmm0{%k1}        # 401060 <_IO_stdin_used+0xa0>
  400ba4:	04 00 00 
  400ba7:	b8 01 00 00 00       	mov    $0x1,%eax
  400bac:	c5 f8 92 c8          	kmov   %eax,%k1
  400bb0:	62 f2 f9 09 d1 45 fd 	vpackstorelpd %zmm0,-0x18(%rbp){%k1}
  400bb7:	b8 01 00 00 00       	mov    $0x1,%eax
  400bbc:	c5 f8 92 c8          	kmov   %eax,%k1
  400bc0:	62 f2 f9 09 19 05 9e 	vbroadcastsd 0x49e(%rip),%zmm0{%k1}        # 401068 <_IO_stdin_used+0xa8>
  400bc7:	04 00 00 
  400bca:	b8 01 00 00 00       	mov    $0x1,%eax
  400bcf:	c5 f8 92 c8          	kmov   %eax,%k1
  400bd3:	62 f2 f9 09 d1 45 fe 	vpackstorelpd %zmm0,-0x10(%rbp){%k1}
  400bda:	b8 a0 15 60 00       	mov    $0x6015a0,%eax
  400bdf:	ba 94 10 40 00       	mov    $0x401094,%edx
  400be4:	48 89 c7             	mov    %rax,%rdi
  400be7:	48 89 d6             	mov    %rdx,%rsi
  400bea:	e8 01 fd ff ff       	callq  4008f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400bef:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  400bf3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  400bf7:	ba 01 00 00 00       	mov    $0x1,%edx
  400bfc:	c5 f8 92 ca          	kmov   %edx,%k1
  400c00:	62 f2 f9 09 19 45 fd 	vbroadcastsd -0x18(%rbp),%zmm0{%k1}
  400c07:	ba 01 00 00 00       	mov    $0x1,%edx
  400c0c:	c5 f8 92 ca          	kmov   %edx,%k1
  400c10:	62 f2 f9 09 19 4d fe 	vbroadcastsd -0x10(%rbp),%zmm1{%k1}
  400c17:	ba 01 00 00 00       	mov    $0x1,%edx
  400c1c:	c5 f8 92 ca          	kmov   %edx,%k1
  400c20:	62 f2 f9 08 5b 1d b6 	vbroadcasti64x4 0x3b6(%rip),%zmm3        # 400fe0 <_IO_stdin_used+0x20>
  400c27:	03 00 00 
  400c2a:	62 f2 f9 08 5b 25 cc 	vbroadcasti64x4 0x3cc(%rip),%zmm4        # 401000 <_IO_stdin_used+0x40>
  400c31:	03 00 00 
  400c34:	62 f2 79 08 5a 2d 12 	vbroadcasti32x4 0x412(%rip),%zmm5        # 401050 <_IO_stdin_used+0x90>
  400c3b:	04 00 00 
  400c3e:	62 f1 49 08 ef f6    	vpxord %zmm6,%zmm6,%zmm6
  400c44:	62 f2 79 08 58 3d 2a 	vpbroadcastd 0x42a(%rip),%zmm7        # 401078 <_IO_stdin_used+0xb8>
  400c4b:	04 00 00 
  400c4e:	62 f2 f1 09 55 f7    	vfixupnanpd %zmm7,%zmm1,%zmm6{%k1}
  400c54:	62 f2 f9 09 55 f7    	vfixupnanpd %zmm7,%zmm0,%zmm6{%k1}
  400c5a:	62 f1 c9 09 c2 d6 00 	vcmpeqpd %zmm6,%zmm6,%k2{%k1}
  400c61:	c5 f8 90 da          	kmov   %k2,%k3
  400c65:	c5 f8 42 d9          	kandn  %k1,%k3
  400c69:	62 f3 f9 09 26 f1 00 	vgetmantpd $0x0,%zmm1,%zmm6{%k1}
  400c70:	62 f1 f9 f9 5a fe    	vcvtpd2ps {rz-sae},%zmm6,%zmm7{%k1}
  400c76:	62 72 79 09 ca c7    	vrcp23ps %zmm7,%zmm8{%k1}
  400c7c:	62 d1 78 09 5a f8    	vcvtps2pd %ymm8,%zmm7{%k1}
  400c82:	62 71 f9 58 28 c3    	vmovapd %zmm3{bbbb},%zmm8
  400c88:	62 d2 c1 c9 ac f0    	vfnmadd213pd {rn-sae},%zmm8,%zmm7,%zmm6{%k1}
  400c8e:	62 f2 c9 c9 b8 f6    	vfmadd231pd {rn-sae},%zmm6,%zmm6,%zmm6{%k1}
  400c94:	62 f2 c9 c9 b8 ff    	vfmadd231pd {rn-sae},%zmm7,%zmm6,%zmm7{%k1}
  400c9a:	62 f2 f9 09 42 f1    	vgetexppd %zmm1,%zmm6{%k1}
  400ca0:	62 72 f9 09 42 c0    	vgetexppd %zmm0,%zmm8{%k1}
  400ca6:	62 71 b9 09 5c ce    	vsubpd %zmm6,%zmm8,%zmm9{%k1}
  400cac:	62 f1 79 48 6f f5    	vmovdqa32 %zmm5{aaaa},%zmm6
  400cb2:	62 f2 31 08 39 f6    	vpminsd %zmm6,%zmm9,%zmm6
  400cb8:	62 f1 79 58 6f ed    	vmovdqa32 %zmm5{bbbb},%zmm5
  400cbe:	62 f2 49 08 3b ed    	vpminud %zmm5,%zmm6,%zmm5
  400cc4:	62 f1 f9 68 28 f3    	vmovapd %zmm3{cccc},%zmm6
  400cca:	62 f1 d1 09 58 ee    	vaddpd %zmm6,%zmm5,%zmm5{%k1}
  400cd0:	62 f1 51 08 72 f5 14 	vpslld $0x14,%zmm5,%zmm5
  400cd7:	62 f1 49 08 72 e5 01 	vpsrad $0x1,%zmm5,%zmm6
  400cde:	62 f1 f9 48 6f e4    	vmovdqa64 %zmm4{aaaa},%zmm4
  400ce4:	62 f1 c9 09 db f4    	vpandq %zmm4,%zmm6,%zmm6{%k1}
  400cea:	62 f1 51 08 fa e6    	vpsubd %zmm6,%zmm5,%zmm4
  400cf0:	62 f1 f9 58 6f eb    	vmovdqa64 %zmm3{bbbb},%zmm5
  400cf6:	62 f1 59 08 fe e5    	vpaddd %zmm5,%zmm4,%zmm4
  400cfc:	62 f1 f9 48 6f db    	vmovdqa64 %zmm3{aaaa},%zmm3
  400d02:	62 f1 d9 09 db e3    	vpandq %zmm3,%zmm4,%zmm4{%k1}
  400d08:	62 f3 f9 09 26 d8 00 	vgetmantpd $0x0,%zmm0,%zmm3{%k1}
  400d0f:	62 f1 e1 ca 59 ef    	vmulpd {rn-sae},%zmm7,%zmm3,%zmm5{%k2}
  400d15:	62 f2 79 08 58 1d 5d 	vpbroadcastd 0x35d(%rip),%zmm3        # 40107c <_IO_stdin_used+0xbc>
  400d1c:	03 00 00 
  400d1f:	62 f2 f1 09 55 cb    	vfixupnanpd %zmm3,%zmm1,%zmm1{%k1}
  400d25:	62 f1 f9 cb 59 e9    	vmulpd {rn-sae},%zmm1,%zmm0,%zmm5{%k3}
  400d2b:	62 f1 51 08 fe c6    	vpaddd %zmm6,%zmm5,%zmm0
  400d31:	62 f1 f9 8a 59 ec    	vmulpd {rn},%zmm4,%zmm0,%zmm5{%k2}
  400d37:	62 f1 f9 09 28 d5    	vmovapd %zmm5,%zmm2{%k1}
  400d3d:	48 89 c7             	mov    %rax,%rdi
  400d40:	62 f1 f9 08 28 c2    	vmovapd %zmm2,%zmm0
  400d46:	e8 35 fb ff ff       	callq  400880 <std::ostream::operator<<(double)@plt>
  400d4b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  400d4f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  400d53:	ba 30 09 40 00       	mov    $0x400930,%edx
  400d58:	48 89 c7             	mov    %rax,%rdi
  400d5b:	48 89 d6             	mov    %rdx,%rsi
  400d5e:	e8 bd fb ff ff       	callq  400920 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  400d63:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  400d67:	db 2d b3 02 00 00    	fldt   0x2b3(%rip)        # 401020 <_IO_stdin_used+0x60>
  400d6d:	db 7d c0             	fstpt  -0x40(%rbp)
  400d70:	db 2d ba 02 00 00    	fldt   0x2ba(%rip)        # 401030 <_IO_stdin_used+0x70>
  400d76:	db 7d d0             	fstpt  -0x30(%rbp)
  400d79:	b8 a0 15 60 00       	mov    $0x6015a0,%eax
  400d7e:	ba a8 10 40 00       	mov    $0x4010a8,%edx
  400d83:	48 89 c7             	mov    %rax,%rdi
  400d86:	48 89 d6             	mov    %rdx,%rsi
  400d89:	e8 62 fb ff ff       	callq  4008f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400d8e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  400d92:	48 83 c4 f0          	add    $0xfffffffffffffff0,%rsp
  400d96:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400d9a:	db 6d c0             	fldt   -0x40(%rbp)
  400d9d:	db 6d d0             	fldt   -0x30(%rbp)
  400da0:	de f9                	fdivrp %st,%st(1)
  400da2:	db 3c 24             	fstpt  (%rsp)
  400da5:	48 89 c7             	mov    %rax,%rdi
  400da8:	e8 13 fb ff ff       	callq  4008c0 <std::ostream::operator<<(long double)@plt>
  400dad:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  400db1:	48 83 c4 10          	add    $0x10,%rsp
  400db5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400db9:	ba 30 09 40 00       	mov    $0x400930,%edx
  400dbe:	48 89 c7             	mov    %rax,%rdi
  400dc1:	48 89 d6             	mov    %rdx,%rsi
  400dc4:	e8 57 fb ff ff       	callq  400920 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  400dc9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  400dcd:	b8 00 00 00 00       	mov    $0x0,%eax
  400dd2:	c9                   	leaveq 
  400dd3:	c3                   	retq   

0000000000400dd4 <__sti__$E>:
  400dd4:	55                   	push   %rbp
  400dd5:	48 89 e5             	mov    %rsp,%rbp
  400dd8:	48 83 ec 10          	sub    $0x10,%rsp
  400ddc:	b8 c0 16 60 00       	mov    $0x6016c0,%eax
  400de1:	48 89 c7             	mov    %rax,%rdi
  400de4:	e8 c7 fa ff ff       	callq  4008b0 <std::ios_base::Init::Init()@plt>
  400de9:	b8 e0 08 40 00       	mov    $0x4008e0,%eax
  400dee:	ba c0 16 60 00       	mov    $0x6016c0,%edx
  400df3:	b9 98 15 60 00       	mov    $0x601598,%ecx
  400df8:	48 89 c7             	mov    %rax,%rdi
  400dfb:	48 89 d6             	mov    %rdx,%rsi
  400dfe:	48 89 ca             	mov    %rcx,%rdx
  400e01:	e8 fa fa ff ff       	callq  400900 <__cxa_atexit@plt>
  400e06:	89 45 f0             	mov    %eax,-0x10(%rbp)
  400e09:	c9                   	leaveq 
  400e0a:	c3                   	retq   
  400e0b:	90                   	nop

0000000000400e0c <std::char_traits<char>::length(char const*)>:
  400e0c:	55                   	push   %rbp
  400e0d:	48 89 e5             	mov    %rsp,%rbp
  400e10:	48 83 ec 10          	sub    $0x10,%rsp
  400e14:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  400e18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e1c:	48 89 c1             	mov    %rax,%rcx
  400e1f:	33 c0                	xor    %eax,%eax
  400e21:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
  400e25:	85 d2                	test   %edx,%edx
  400e27:	74 10                	je     400e39 <std::char_traits<char>::length(char const*)+0x2d>
  400e29:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  400e2e:	48 83 c0 02          	add    $0x2,%rax
  400e32:	85 d2                	test   %edx,%edx
  400e34:	75 eb                	jne    400e21 <std::char_traits<char>::length(char const*)+0x15>
  400e36:	48 ff c8             	dec    %rax
  400e39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400e3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e41:	c9                   	leaveq 
  400e42:	c3                   	retq   
  400e43:	90                   	nop

0000000000400e44 <std::ios_base::precision(long)>:
  400e44:	55                   	push   %rbp
  400e45:	48 89 e5             	mov    %rsp,%rbp
  400e48:	48 83 ec 20          	sub    $0x20,%rsp
  400e4c:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  400e50:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  400e54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400e58:	48 8b 40 08          	mov    0x8(%rax),%rax
  400e5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400e60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400e64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400e68:	48 89 50 08          	mov    %rdx,0x8(%rax)
  400e6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400e70:	c9                   	leaveq 
  400e71:	c3                   	retq   
  400e72:	90                   	nop
  400e73:	90                   	nop

0000000000400e74 <std::ctype<char>::widen(char) const>:
  400e74:	55                   	push   %rbp
  400e75:	48 89 e5             	mov    %rsp,%rbp
  400e78:	48 83 ec 20          	sub    $0x20,%rsp
  400e7c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400e80:	40 88 75 f0          	mov    %sil,-0x10(%rbp)
  400e84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e88:	0f be 40 38          	movsbl 0x38(%rax),%eax
  400e8c:	48 0f be c0          	movsbq %al,%rax
  400e90:	85 c0                	test   %eax,%eax
  400e92:	74 18                	je     400eac <std::ctype<char>::widen(char) const+0x38>
  400e94:	0f be 45 f0          	movsbl -0x10(%rbp),%eax
  400e98:	48 0f be c0          	movsbq %al,%rax
  400e9c:	0f b6 c0             	movzbl %al,%eax
  400e9f:	48 03 45 e8          	add    -0x18(%rbp),%rax
  400ea3:	48 83 c0 39          	add    $0x39,%rax
  400ea7:	0f be 00             	movsbl (%rax),%eax
  400eaa:	c9                   	leaveq 
  400eab:	c3                   	retq   
  400eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400eb0:	48 89 c7             	mov    %rax,%rdi
  400eb3:	e8 e8 f9 ff ff       	callq  4008a0 <std::ctype<char>::_M_widen_init() const@plt>
  400eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ebc:	ba 06 00 00 00       	mov    $0x6,%edx
  400ec1:	48 63 d2             	movslq %edx,%rdx
  400ec4:	48 6b d2 08          	imul   $0x8,%rdx,%rdx
  400ec8:	48 03 10             	add    (%rax),%rdx
  400ecb:	48 8b 02             	mov    (%rdx),%rax
  400ece:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400ed2:	0f be 4d f0          	movsbl -0x10(%rbp),%ecx
  400ed6:	48 89 d7             	mov    %rdx,%rdi
  400ed9:	89 ce                	mov    %ecx,%esi
  400edb:	ff d0                	callq  *%rax
  400edd:	88 45 e0             	mov    %al,-0x20(%rbp)
  400ee0:	0f be 45 e0          	movsbl -0x20(%rbp),%eax
  400ee4:	c9                   	leaveq 
  400ee5:	c3                   	retq   
  400ee6:	90                   	nop
  400ee7:	90                   	nop

0000000000400ee8 <std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)>:
  400ee8:	55                   	push   %rbp
  400ee9:	48 89 e5             	mov    %rsp,%rbp
  400eec:	48 83 ec 10          	sub    $0x10,%rsp
  400ef0:	89 7d f0             	mov    %edi,-0x10(%rbp)
  400ef3:	89 75 f8             	mov    %esi,-0x8(%rbp)
  400ef6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400ef9:	0b 45 f0             	or     -0x10(%rbp),%eax
  400efc:	c9                   	leaveq 
  400efd:	c3                   	retq   
  400efe:	90                   	nop
  400eff:	90                   	nop

0000000000400f00 <std::ctype<char> const& std::__check_facet<std::ctype<char> >(std::ctype<char> const*)>:
  400f00:	55                   	push   %rbp
  400f01:	48 89 e5             	mov    %rsp,%rbp
  400f04:	48 83 ec 10          	sub    $0x10,%rsp
  400f08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  400f0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f10:	48 85 c0             	test   %rax,%rax
  400f13:	75 05                	jne    400f1a <std::ctype<char> const& std::__check_facet<std::ctype<char> >(std::ctype<char> const*)+0x1a>
  400f15:	e8 76 f9 ff ff       	callq  400890 <std::__throw_bad_cast()@plt>
  400f1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f1e:	c9                   	leaveq 
  400f1f:	c3                   	retq   

0000000000400f20 <__libc_csu_init>:
  400f20:	41 57                	push   %r15
  400f22:	4c 8d 3d db 03 20 00 	lea    0x2003db(%rip),%r15        # 601304 <__init_array_end>
  400f29:	41 56                	push   %r14
  400f2b:	49 89 d6             	mov    %rdx,%r14
  400f2e:	41 55                	push   %r13
  400f30:	49 89 f5             	mov    %rsi,%r13
  400f33:	41 54                	push   %r12
  400f35:	41 89 fc             	mov    %edi,%r12d
  400f38:	55                   	push   %rbp
  400f39:	48 8d 2d c4 03 20 00 	lea    0x2003c4(%rip),%rbp        # 601304 <__init_array_end>
  400f40:	53                   	push   %rbx
  400f41:	49 29 ef             	sub    %rbp,%r15
  400f44:	51                   	push   %rcx
  400f45:	e8 0e f9 ff ff       	callq  400858 <_init>
  400f4a:	49 c1 ff 03          	sar    $0x3,%r15
  400f4e:	74 1d                	je     400f6d <__libc_csu_init+0x4d>
  400f50:	31 db                	xor    %ebx,%ebx
  400f52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  400f58:	4c 89 f2             	mov    %r14,%rdx
  400f5b:	4c 89 ee             	mov    %r13,%rsi
  400f5e:	44 89 e7             	mov    %r12d,%edi
  400f61:	ff 54 dd 00          	callq  *0x0(%rbp,%rbx,8)
  400f65:	48 ff c3             	inc    %rbx
  400f68:	4c 39 fb             	cmp    %r15,%rbx
  400f6b:	75 eb                	jne    400f58 <__libc_csu_init+0x38>
  400f6d:	58                   	pop    %rax
  400f6e:	5b                   	pop    %rbx
  400f6f:	5d                   	pop    %rbp
  400f70:	41 5c                	pop    %r12
  400f72:	41 5d                	pop    %r13
  400f74:	41 5e                	pop    %r14
  400f76:	41 5f                	pop    %r15
  400f78:	c3                   	retq   
  400f79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400f80 <__libc_csu_fini>:
  400f80:	c3                   	retq   
  400f81:	66 90                	xchg   %ax,%ax
  400f83:	90                   	nop

0000000000400f84 <__do_global_ctors_aux>:
  400f84:	55                   	push   %rbp
  400f85:	48 89 e5             	mov    %rsp,%rbp
  400f88:	53                   	push   %rbx
  400f89:	bb 10 13 60 00       	mov    $0x601310,%ebx
  400f8e:	52                   	push   %rdx
  400f8f:	eb 06                	jmp    400f97 <__do_global_ctors_aux+0x13>
  400f91:	48 83 eb 08          	sub    $0x8,%rbx
  400f95:	ff d0                	callq  *%rax
  400f97:	48 8b 03             	mov    (%rbx),%rax
  400f9a:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  400f9e:	75 f1                	jne    400f91 <__do_global_ctors_aux+0xd>
  400fa0:	58                   	pop    %rax
  400fa1:	5b                   	pop    %rbx
  400fa2:	5d                   	pop    %rbp
  400fa3:	c3                   	retq   

Disassembly of section .fini:

0000000000400fa4 <_fini>:
  400fa4:	48 83 ec 08          	sub    $0x8,%rsp
  400fa8:	e8 e7 f9 ff ff       	callq  400994 <__do_global_dtors_aux>
  400fad:	48 83 c4 08          	add    $0x8,%rsp
  400fb1:	c3                   	retq   
