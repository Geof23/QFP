// This is the header for the checkpoint instrumentation, which works
// in tandem with gdb.  gdb will load two versions of the program, and
// will initiate a (hardware) watchpoint for each address range that is passed
// in the 'checkpoint' call.  FYI -- there is a platform limit to the number
// of hardware watchpoints that can be set . . .

#include <iostream>
namespace QFP {

std::string const AFLAG =  "***checkAddr:";
std::string const LFLAG =  "***checkLen:";
std::string const LAFLAG = "***checkLab:";
  
template<typename T>
void
checkpoint(T &obj, std::string const label){
  auto addr = std::addressof(obj);
  //DELME
  std::cout << "addrof: " << (long)addr << ":" << (long)&obj << std::endl;
  
  std::cerr << AFLAG  << (long)addr << std::endl;
  std::cerr << LFLAG  << sizeof(T) << std::endl;
  std::cerr << LAFLAG << label << std::endl;
#ifndef __aarch64__
  asm("INT $3");
#else
  asm("svc 0");
#endif
}
}
