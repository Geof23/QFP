// This is the header for the checkpoint instrumentation, which works
// in tandem with gdb.  gdb will load two versions of the program, and
// will initiate a (hardware) watchpoint for each address range that is passed
// in the 'checkpoint' call.  FYI -- there is a platform limit to the number
// of hardware watchpoints that can be set . . .

#include <iostream>
#include <unordered_map>

namespace QFP {

std::string const AFLAG =  "***checkAddr:";
std::string const LFLAG =  "***checkLen:";
std::string const LAFLAG = "***checkLab:";
  
namespace {
  std::unordered_map<std::string, bool> checked;
}
  
template<typename T>
void
checkpoint(T &obj, size_t len, std::string const label, bool NO_WATCH){
  if (NO_WATCH) return;
  auto addr = std::addressof(obj);
  if(checked.count(label) == 0){
//    std::cout << std::addressof(checked) << " (checked)" << std::endl;
    std::cerr << AFLAG  << addr << std::endl;
    std::cerr << LFLAG  << len << std::endl;
    std::cerr << LAFLAG << label << std::endl;
    asm("INT $3");
    checked.insert({label, true});
  }
}
}
