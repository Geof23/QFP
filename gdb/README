This describes the use of QFP_gdb.

QFP_gdb is used to perform a differential debugging of two nearly identical versions
of a program.  Specifically, under QFP, it is used to identify divergences in data
produced between two source-identical tests that are compiled on the same platform
with different compilers and/or compiler flags.  This could probably be easily
extended to work on different platforms as well, using gdb's remote debugging
capabilities . . .

Anyway, in general it works by executing the two versions of the program in tandem,
where there are (source code equivalent) regions of memory that are monitored
by gdb in the form of hardware watchpoints.  gdb will check that for each time
a monitored memory region in program A is modified, there will be a corresponding
modification in program B.  At which time a 'write divergence' is observed, QFP_gdb
will backtrack, as neccessary, to place both A and B at the point of execution
where this divergent write occurred.  As QFP_gdb begins to 'record' at main(),
the developer can then step through the executions of either A or B and observe
the sequence of instructions (these may be source and machine level, if debugging
information was provided, or machine only if not compiled with -g)[NOTE: there are
so called 'heisenbugs' or maybe better coined 'heisenbehaviors' that disappear
when the program is compiled with -g]

Here are the main components of QFP_gdb:

* the instrumentation (living in qfp/gdb/inst), provides a call that:
** notifies gdb of a 'checkpoint' (really a memory region for
   watchpoint)
** invokes a 'hard breakpoint', i.e. an int 3 [which for Intel processors,
   signals SIGTRAP, which gdb handles, indicating a breakpoint hit]
** QFP_gdb handles this breakpoint transparently, creating the actual
   watchpoint, and then continues execution

* The launcher
** a script that takes two executable paths and a test name, along with
   [optionally] the precision and reduction sort
** this script launches gdb inside of emacs

* The gdb configuration script
** this loads our gdb extensions for QFP_gdb

* The extension code
** contains the breakpoint overloads
*** the setup breakpoing, for creating watchpoints
*** the running breakpoint, which handles our watchpoints
**** performs the comparison of corresponding writes between inferiors
**** rewinds executions as necessary to align execution points of A and B
     to their divergence points (wrt watched memory regions)
** data structures for tracking the isomorphic breaks in each inferior
** does the launching of the secondary inferior


