# -- LICENSE BEGIN --
#
# Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# Written by
#   Michael Bentley (mikebentley15@gmail.com),
#   Geof Sawaya (fredricflinstone@gmail.com),
#   and Ian Briggs (ian.briggs@utah.edu)
# under the direction of
#   Ganesh Gopalakrishnan
#   and Dong H. Ahn.
#
# LLNL-CODE-743137
#
# All rights reserved.
#
# This file is part of FLiT. For details, see
#   https://pruners.github.io/flit
# Please also read
#   https://github.com/PRUNERS/FLiT/blob/master/LICENSE
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
#
# - Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the disclaimer
#   (as noted below) in the documentation and/or other materials
#   provided with the distribution.
#
# - Neither the name of the LLNS/LLNL nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL
# SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
# Additional BSD Notice
#
# 1. This notice is required to be provided under our contract
#    with the U.S. Department of Energy (DOE). This work was
#    produced at Lawrence Livermore National Laboratory under
#    Contract No. DE-AC52-07NA27344 with the DOE.
#
# 2. Neither the United States Government nor Lawrence Livermore
#    National Security, LLC nor any of their employees, makes any
#    warranty, express or implied, or assumes any liability or
#    responsibility for the accuracy, completeness, or usefulness of
#    any information, apparatus, product, or process disclosed, or
#    represents that its use would not infringe privately-owned
#    rights.
#
# 3. Also, reference herein to any specific commercial products,
#    process, or services by trade name, trademark, manufacturer or
#    otherwise does not necessarily constitute or imply its
#    endorsement, recommendation, or favoring by the United States
#    Government or Lawrence Livermore National Security, LLC. The
#    views and opinions of authors expressed herein do not
#    necessarily state or reflect those of the United States
#    Government or Lawrence Livermore National Security, LLC, and
#    shall not be used for advertising or product endorsement
#    purposes.
#
# -- LICENSE END --
# Autogenerated Makefile using "flit update"
#   flit version {flit_version}

DEV_TARGET      := devrun
GT_TARGET       := gtrun
GT_OUT          := ground-truth.csv

UNAME_S         := {uname}

# will be None if not specified in flit-config.toml
{compiler_defs}
CLANG_TYPE      := clang
INTEL_TYPE      := intel
GCC_TYPE        := gcc

# keep only the compilers that are not None and are in the path
COMPILERS       := {compilers}
{compiler_fixed_compile_flags}
{compiler_fixed_link_flags}

#ifeq ($(DEV_CXX_TYPE),$(GCC_TYPE))
#  DEV_CXXFLAGS  += $(GCC_CXXFLAGS)
#  DEV_LDFLAGS   += $(GCC_LDFLAGS)
#endif
#ifeq ($(DEV_CXX_TYPE),$(CLANG_TYPE))
#  DEV_CXXFLAGS  += $(CLANG_CXXFLAGS)
#  DEV_LDFLAGS   += $(CLANG_LDFLAGS)
#endif
#ifeq ($(DEV_CXX_TYPE),$(INTEL_TYPE))
#  DEV_CXXFLAGS  += $(INTEL_CXXFLAGS)
#  DEV_LDFLAGS   += $(INTEL_LDFLAGS)
#endif
#
#ifeq ($(GT_CXX_TYPE),$(GCC_TYPE))
#  GT_CXXFLAGS   += $(GCC_CXXFLAGS)
#  GT_LDFLAGS    += $(GCC_LDFLAGS)
#endif
#ifeq ($(GT_CXX_TYPE),$(CLANG_TYPE))
#  GT_CXXFLAGS   += $(CLANG_CXXFLAGS)
#  GT_LDFLAGS    += $(CLANG_LDFLAGS)
#endif
#ifeq ($(GT_CXX_TYPE),$(INTEL_TYPE))
#  GT_CXXFLAGS   += $(INTEL_CXXFLAGS)
#  GT_LDFLAGS    += $(INTEL_LDFLAGS)
#endif

FLIT_INC_DIR    := {flit_include_dir}
FLIT_LIB_DIR    := {flit_lib_dir}
FLIT_DATA_DIR   := {flit_data_dir}
FLIT_SCRIPT_DIR := {flit_script_dir}

DEV_CXX         := {dev_compiler}
DEV_CXX_TYPE    := {dev_type}
DEV_OPTL        := {dev_optl}
DEV_SWITCHES    := {dev_switches}

GT_CXX          := {ground_truth_compiler}
GT_CXX_TYPE     := {ground_truth_type}
GT_OPTL         := {ground_truth_optl}
GT_SWITCHES     := {ground_truth_switches}

TEST_RUN_ARGS   := {test_run_args}

ENABLE_MPI      := {enable_mpi}

# initalize some variables to be appended later
CXXFLAGS        :=
DEV_CXXFLAGS    :=
GT_CXXFLAGS     :=
LDFLAGS         :=
LDLIBS          :=

RUNWRAP          = $(RUN_WRAPPER)
ifeq ($(ENABLE_MPI),yes) # If we are using MPI
  IS_OPENMPI    := $(shell mpic++ --showme:compile >/dev/null 2>&1 && echo true)
ifeq ($(IS_OPENMPI),true)
  CXXFLAGS      += $(shell mpic++ --showme:compile 2>/dev/null)
  LDFLAGS       += $(shell mpic++ --showme:link 2>/dev/null)
else  # IS_OPENMPI == false
  CXXFLAGS      += $(shell mpic++ -compile_info 2>/dev/null | \
                           cut --delimiter ' ' --field 2-)
  LDFLAGS       += $(shell mpic++ -link_info | cut --delimiter ' ' --field 2-)
endif # IS_OPENMPI == true
endif # ENABLE_MPI == yes

OBJ_DIR         := obj
ALL_DIRS        := $(OBJ_DIR)

# This flag specifies NOT to build position-independent executables
CXXFLAGS        += -fno-pie
CXXFLAGS        += -std=c++11
CXXFLAGS        += -I.
CXXFLAGS        += -I$(FLIT_INC_DIR)

DEV_CXXFLAGS    += -g
DEV_CXXFLAGS    += -Wall
DEV_CXXFLAGS    += -Wextra
DEV_CXXFLAGS    += -Wuninitialized
DEV_CXXFLAGS    += -Wno-shift-count-overflow

# This flag specifies NOT to link as a position-independent executable
# Note: this flag does not exist in GCC 4 or GCC 5 so it will fail to compile
#       we need extra logic to check for this and conditionally add this flag
#LDFLAGS     += -no-pie
LDLIBS          += -lm
LDLIBS          += -lstdc++
LDLIBS          += -lflit
ifeq ($(UNAME_S),Darwin) # If we are on a Mac OSX system
  LDFLAGS       += -Llib
else
  LDFLAGS       += -L$(FLIT_LIB_DIR)
  LDFLAGS       += -Wl,-rpath=$(realpath $(FLIT_LIB_DIR))
endif

# Be silent by default
ifndef VERBOSE
.SILENT:
endif

# Helper functions to determine if the compiler is a particular version of GCC

# Returns the compiler name as output by the --version flag
# @param 1: executable name or path to compiler
GET_COMPILER     = $(shell $1 --version | head -n 1 | awk '{{ print $$1 }}')

# Returns the version of the compiler as returned by -dumpversion
# @param 1: executable name or path to compiler
GET_COMPILER_VER = $(shell $1 -dumpversion)

# Returns 1 if the major version matches else 0
# @param 1: executable name or path to compiler
# @param 2: major version number as an integer
IS_MAJOR_VER     = $(shell expr substr $(call GET_COMPILER_VER,$1) 1 1 = $2)

# Returns 1 if the compiler is GCC version 4 or version 5
# @param 1: executable name or path to compiler
IS_VER_4_OR_5    = $(shell expr $(call IS_MAJOR_VER,$1,4) \| \
                                $(call IS_MAJOR_VER,$1,5))

DEV_LDFLAGS      =
GT_LDFLAGS       =

# Note: needs dependency out filename after this variable
DEPFLAGS        += -MMD -MP -MF

# TODO: deprecated.  Remove in FLiT version 3.0
TESTS            = $(wildcard tests/*.cpp)
SOURCE           = $(wildcard *.cpp)
SOURCE          += $(TESTS)

# A Makefile function
# @param 1: color (e.g. BLUE or GREEN)
# @param 2: message to be printed in the color
color_out_noline = \
             if [ -t 1 ]; then \
               /bin/echo -ne "$(BASH_$1)$2$(BASH_CLEAR)"; \
             else \
               /bin/echo -n "$2"; \
             fi
color_out = \
             if [ -t 1 ]; then \
               /bin/echo -e "$(BASH_$1)$2$(BASH_CLEAR)"; \
             else \
               /bin/echo "$2"; \
             fi

BASH_CLEAR    := \e[0m
BASH_BLACK    := \e[0;30m
BASH_BROWN    := \e[0;33m
BASH_GRAY     := \e[0;37m
BASH_GREY     := \e[0;37m
BASH_DARKGRAY := \e[1;30m
BASH_DARKGREY := \e[1;30m
BASH_RED      := \e[1;31m
BASH_GREEN    := \e[1;32m
BASH_YELLOW   := \e[1;33m
BASH_BLUE     := \e[1;34m
BASH_PURPLE   := \e[1;35m
BASH_CYAN     := \e[1;36m
BASH_WHITE    := \e[1;37m


.PHONY: help
help:
	@echo 'You can run the Makefile directly, but it is recommended to use'
	@echo
	@echo '  flit make'
	@echo
	@echo 'so that you can have functionality such as adding the results to a'
	@echo 'database.'
	@echo
	@echo 'The following targets are available:'
	@echo
	@echo '  help        Show this help and exit (default target)'
	@echo '  dev         Only run the devel compilation to test things out'
	@echo '  dirs        Make only the directories, no files'
	@echo '  groundtruth Compile the ground-truth version'
	@echo '  gt          Same as groundtruth'
	@echo '  runbuild    Build all executables needed for the run target'
	@echo '  run         Run all combinations of compilation, results in results/'
	@echo '  clean       Clean intermediate files'
	@echo '  veryclean   Runs clean + removes targets and results'
	@echo '  distclean   Same as veryclean'
	@echo

# Note: having this include at the end breaks the makefile for when users add
# to SOURCE from custom.mk
-include custom.mk

# For backward compatability, put old variable names into the standard variable
# locations
# TODO: Remove in FLiT version 3.0
CXXFLAGS        += $(CC_REQUIRED)
LDFLAGS         += $(LD_REQUIRED)
DEV_CXXFLAGS    += $(DEV_CFLAGS)
GT_CXXFLAGS     += $(GT_CFLAGS)

# sort and remove duplicates
# TODO: Remove in FLiT version 3.0
SOURCE          := $(sort $(SOURCE))

DEV_OBJ_DIR     := $(OBJ_DIR)/dev
ALL_DIRS        += $(DEV_OBJ_DIR)
DEV_OBJ         := $(addprefix $(DEV_OBJ_DIR)/,$(notdir $(SOURCE:%=%.o)))
DEV_DEPS        := $(DEV_OBJ:%.o=%.d)
GT_OBJ_DIR      := $(OBJ_DIR)/gt
ALL_DIRS        += $(GT_OBJ_DIR)
GT_OBJ          := $(addprefix $(GT_OBJ_DIR)/,$(notdir $(SOURCE:%=%.o)))
GT_DEPS         := $(GT_OBJ:%.o=%.d)
GT_OBJ_FPIC     := $(GT_OBJ:%.o=%_fPIC.o)

HOSTNAME        := {hostname}

RESULTS_DIR     := results
ALL_DIRS        += $(RESULTS_DIR)

# Compiler setting targets
#   taken from: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
#   among other places
# more comp settings, taken from here:
# https://software.intel.com/sites/default/files/article/326703/fp-control-2012-08.pdf

# individual flags

## optls

{opcodes_definitions}

## switches

{switches_definitions}

{compiler_opcodes}

{compiler_switches}

##########################################################
#
# Now to define the recursion for speed and memory reasons
#
##########################################################

# Compiles a single object file from a source file given compiler and flags
# @param 1: source file
# @param 2: object file
# @param 3: compiler
# @param 4: optimization level
# @param 5: switches
# @param 6: target filename
# @param 7: extra compiler flags
define COMPILE_RULE
$2: $1 Makefile custom.mk | $(patsubst %/,%,$(dir $2))
	@$(call color_out,CYAN,  $(strip $1) -> $(strip $2))
	$3 $4 $5 -c $7 $(CXXFLAGS) $(DEPFLAGS) $(2:%.o=%.d) $1 -o $2 \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(strip $3)"' \
	  -DFLIT_OPTL='"$(strip $4)"' \
	  -DFLIT_SWITCHES='"$(strip $5)"' \
	  -DFLIT_FILENAME='"$(notdir $(strip $6))"'
endef

REC_DIRS        := $(foreach c, $(COMPILERS),\
                     $(foreach s, $(SWITCHES_$(strip $c)),\
                       $(foreach o, $(OPCODES_$(strip $c)),\
                         $(OBJ_DIR)/$c_$(HOSTNAME)_$s_$o)))
ALL_DIRS        += $(REC_DIRS)

RUNBUILD_DIR := bin
ALL_DIRS     += $(RUNBUILD_DIR)

# will be set internally when doing recursive calls.  Get set to variable names
# containing the information (e.g. R_CUR_COMPILER=CLANG)
R_CUR_COMPILER  ?=
R_CUR_OPTL      ?=
R_CUR_SWITCHES  ?=

.PHONY: dirs
dirs: $(ALL_DIRS)

$(ALL_DIRS):
	@$(call color_out_noline,CYAN,  mkdir)
	@echo " $@"
	+mkdir -p $@

# If we are in a recursion
ifdef R_IS_RECURSED

R_ID            := $(R_CUR_COMPILER)_$(HOSTNAME)_$(R_CUR_SWITCHES)_$(R_CUR_OPTL)
R_TARGET        := $(RUNBUILD_DIR)/$(R_ID)
R_OBJ_DIR       := $(OBJ_DIR)/$(R_ID)
R_OBJ           := $(addprefix $(R_OBJ_DIR)/,$(notdir $(SOURCE:%=%.o)))
R_DEP           := $(R_OBJ:%.o=%.d)

-include $(R_DEP)

.PHONY: rec
rec: $(R_TARGET)

# clang's flag is -nopie
# else if the current compiler is not GCC 4 or 5, then enable -no-pie
# GCC 4 and 5 do not need -no-pie since that is the default
ifeq ($($(R_CUR_COMPILER)_TYPE),$(CLANG_TYPE))
  LDFLAGS       += -nopie
else ifeq ($($(R_CUR_COMPILER)_TYPE),$(GCC_TYPE))
  ifeq ($(call IS_VER_4_OR_5,$($(R_CUR_COMPILER))),0)
    LDFLAGS       += -no-pie
  endif
endif

$(R_TARGET): $(R_OBJ) | $(RUNBUILD_DIR)
	@$(call color_out,CYAN,  Creating $(R_TARGET))
	$($(R_CUR_COMPILER)) $($(R_CUR_OPTL)) $($(R_CUR_SWITCHES)) \
	  $($(R_CUR_COMPILER)_CXXFLAGS) $(CXXFLAGS) \
	  $(R_OBJ) -o $@ \
	  $(LDFLAGS) $($(R_CUR_COMPILER)_LDFLAGS) $(LDLIBS)

$(foreach s,$(SOURCE), \
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(R_OBJ_DIR)/$(notdir $s).o,\
    $($(R_CUR_COMPILER)),\
    $($(R_CUR_OPTL)),\
    $($(R_CUR_SWITCHES)),\
    $(R_ID),\
    $($(R_CUR_COMPILER)_CXXFLAGS))))

# Otherwise, we're not in a recursion.
else # ifndef R_IS_RECURSED

# clang's flag is -nopie
# else if the current compiler is not GCC 4 or 5, then enable -no-pie
# GCC 4 and 5 do not need -no-pie since that is the default
ifeq ($(DEV_CXX_TYPE),$(CLANG_TYPE))
  DEV_LDFLAGS   += -nopie
else ifeq ($(DEV_CXX_TYPE),$(GCC_TYPE))
  ifeq ($(call IS_VER_4_OR_5,$(DEV_CXX)),0)
    DEV_LDFLAGS   += -no-pie
  endif
endif

# same for the gt compiler
ifeq ($(GT_CXX_TYPE),$(CLANG_TYPE))
  GT_LDFLAGS    += -nopie
else ifeq ($(GT_CXX_TYPE),$(GCC_TYPE))
  ifeq ($(call IS_VER_4_OR_5,$(GT_CXX)),0)
    GT_LDFLAGS    += -no-pie
  endif
endif

#
# Define the recursion rules
#

# Set these as empty "simply-expanded variables".  This affects the "+=" operator.
# see https://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_6.html
TARGET_OUTS  :=

# @param 1: compiler variable name (e.g. CLANG)
# @param 2: optimization level variable name (e.g. O2)
# @param 3: switches variable name (e.g. USE_FAST_MATH)
define RECURSION_RULE
TARGETS     += $$(RUNBUILD_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2)

# TODO: use the variable $$(MAKECMDGOALS) to get the original make target
# TODO- or see if it is even necessary

# Make the recursive target depend on $$(GT_TARGET), not because it actually
# depends on that target, but we know that when $$(GT_TARGET) needs to be
# rebuilt, so does each recursive target.

$$(RUNBUILD_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2): $$(GT_TARGET) | $$(OBJ_DIR) $$(RUNBUILD_DIR)
	-+$$(MAKE) rec --no-print-directory \
	  R_IS_RECURSED=True \
	  R_CUR_COMPILER=$(strip $1) \
	  R_CUR_OPTL=$(strip $2) \
	  R_CUR_SWITCHES=$(strip $3)
	-test -f $$(RUNBUILD_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2)

endef

$(foreach c, $(COMPILERS),                 \
  $(foreach s, $(SWITCHES_$(strip $c)),    \
    $(foreach o, $(OPCODES_$(strip $c)),               \
      $(eval $(call RECURSION_RULE, $c, $o, $s)))))
TARGET_OUTS     := $(addprefix $(RESULTS_DIR)/,$(notdir $(TARGETS:%=%-out)))
TARGET_RESULTS  := $(TARGET_OUTS:%=%-comparison.csv)

$(RESULTS_DIR)/%-out: $(RUNBUILD_DIR)/% | $(RESULTS_DIR)
	$(RUNWRAP) ./$< $(TEST_RUN_ARGS) --output $@ || touch $@

# specify how to get comparison
%-out-comparison.csv: %-out $(GT_OUT) $(GT_TARGET)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$(GT_TARGET) --compare-mode --compare-gt $(GT_OUT) --suffix "-comparison.csv" $< -o /dev/null

#
# Define the recursion rules
#

OBJ_CLEAN        = $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%=%_*.o)))
DEP_CLEAN       += $(OBJ_CLEAN:%.o=%.d)

.PHONY: dev gt gt-fpic groundtruth run runbuild
dev: $(DEV_TARGET)
gt: groundtruth
gt-fpic: $(GT_OBJ_FPIC)
groundtruth: $(GT_TARGET)

run: $(TARGET_RESULTS) $(TARGET_OUTS)
run: $(GT_OUT)
run: runbuild
runbuild: $(TARGETS) groundtruth

.PHONY: clean
clean:
	rm -rf $(OBJ_DIR)

.PHONY: veryclean distclean
veryclean: distclean
distclean: clean
	rm -rf $(RESULTS_DIR)
	rm -rf $(RUNBUILD_DIR)
	rm -f $(DEV_TARGET)
	rm -f $(GT_TARGET)
	rm -f $(GT_OUT)
	rm -f $(addsuffix *.dat,$(GT_OUT))

Makefile: flit-config.toml
Makefile: $(FLIT_DATA_DIR)/Makefile.in
Makefile: $(FLIT_SCRIPT_DIR)/flitconfig.py
Makefile: $(FLIT_SCRIPT_DIR)/flitutil.py
Makefile: $(FLIT_SCRIPT_DIR)/flit_update.py
	$(FLIT_SCRIPT_DIR)/flit.py update


# We have a different solution if we are on a mac
ifeq ($(UNAME_S),Darwin)
ALL_DIRS       += lib
lib/libflit.so: $(FLIT_LIB_DIR)/libflit.so | lib
	cp $< $@

.PHONY: cleanlibflit
distclean: cleanlibflit
cleanlibflit:
	rm -rf lib

$(DEV_TARGET): lib/libflit.so
$(GT_TARGET):  lib/libflit.so
$(TARGETS):    lib/libflit.so
else
$(DEV_TARGET): $(FLIT_LIB_DIR)/libflit.so
$(GT_TARGET):  $(FLIT_LIB_DIR)/libflit.so
$(TARGETS):    $(FLIT_LIB_DIR)/libflit.so
endif # ifeq ($(UNAME_S),Darwin): meaning, we are on a mac

# include the build dependencies for gt and dev

-include $(GT_DEPS)
-include $(DEV_DEPS)

#
# Now for the compilation rules:
#

# Dev compilation rules first (easier to understand)
$(DEV_TARGET): $(DEV_OBJ) Makefile custom.mk
	@$(call color_out,BLUE,Building $(DEV_TARGET))
	$(DEV_CXX) $(CXXFLAGS) $(DEV_CXXFLAGS) \
	  -o $@ $(DEV_OBJ) $(LDFLAGS) $(DEV_LDFLAGS) $(LDLIBS)

$(foreach s,$(SOURCE),\
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(DEV_OBJ_DIR)/$(notdir $s).o,\
    $(DEV_CXX),\
    $(DEV_OPTL),\
    $(DEV_SWITCHES),\
    $(DEV_TARGET),\
    $(DEV_CXXFLAGS))))

# Ground truth compilation rules
$(GT_OUT): $(GT_TARGET)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$(GT_TARGET) --output $(GT_OUT) --no-timing

$(GT_TARGET): $(GT_OBJ) Makefile custom.mk
	@$(call color_out,BLUE,Building $(GT_TARGET))
	$(GT_CXX) $(CXXFLAGS) $(GT_CXXFLAGS) \
	  -o $@ $(GT_OBJ) $(LDFLAGS) $(GT_LDFLAGS) $(LDLIBS)

$(foreach s,$(SOURCE),\
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(GT_OBJ_DIR)/$(notdir $s).o,\
    $(GT_CXX),\
    $(GT_OPTL),\
    $(GT_SWITCHES),\
    $(GT_TARGET),\
    $(GT_CXXFLAGS) -g)))

$(foreach s,$(SOURCE),\
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(GT_OBJ_DIR)/$(notdir $s)_fPIC.o,\
    $(GT_CXX),\
    $(GT_OPTL),\
    $(GT_SWITCHES),\
    $(GT_TARGET),\
    $(GT_CXXFLAGS) -fPIC -g)))

endif # end of ifdef R_IS_RECURSED

