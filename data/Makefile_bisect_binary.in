# -- LICENSE BEGIN --
#
# Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# Written by
#   Michael Bentley (mikebentley15@gmail.com),
#   Geof Sawaya (fredricflinstone@gmail.com),
#   and Ian Briggs (ian.briggs@utah.edu)
# under the direction of
#   Ganesh Gopalakrishnan
#   and Dong H. Ahn.
#
# LLNL-CODE-743137
#
# All rights reserved.
#
# This file is part of FLiT. For details, see
#   https://pruners.github.io/flit
# Please also read
#   https://github.com/PRUNERS/FLiT/blob/master/LICENSE
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
#
# - Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the disclaimer
#   (as noted below) in the documentation and/or other materials
#   provided with the distribution.
#
# - Neither the name of the LLNS/LLNL nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL
# SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
# Additional BSD Notice
#
# 1. This notice is required to be provided under our contract
#    with the U.S. Department of Energy (DOE). This work was
#    produced at Lawrence Livermore National Laboratory under
#    Contract No. DE-AC52-07NA27344 with the DOE.
#
# 2. Neither the United States Government nor Lawrence Livermore
#    National Security, LLC nor any of their employees, makes any
#    warranty, express or implied, or assumes any liability or
#    responsibility for the accuracy, completeness, or usefulness of
#    any information, apparatus, product, or process disclosed, or
#    represents that its use would not infringe privately-owned
#    rights.
#
# 3. Also, reference herein to any specific commercial products,
#    process, or services by trade name, trademark, manufacturer or
#    otherwise does not necessarily constitute or imply its
#    endorsement, recommendation, or favoring by the United States
#    Government or Lawrence Livermore National Security, LLC. The
#    views and opinions of authors expressed herein do not
#    necessarily state or reflect those of the United States
#    Government or Lawrence Livermore National Security, LLC, and
#    shall not be used for advertising or product endorsement
#    purposes.
#
# -- LICENSE END --

# Autogenerated Makefile using "flit bisect"
#   Date:         {datetime}
#   FLiT version: {flit_version}
#
# This file is intended to test one combination of compiling between a
# troublesome compilation and the ground truth compilation.
#
# For every combination that needs to be tested, a new Makefile is generated

# include the main Makefiles for this project, getting their juicy settings
# Note: Makefile already includes custom.mk, so we don't need to explicitly
#       include it here.
-include Makefile

PRECISION        := {precision}
TEST_CASE        := {test_case}

TROUBLE_CXX      := {trouble_cxx}
TROUBLE_OPTL     := {trouble_optl}
TROUBLE_SWITCHES := {trouble_switches}
TROUBLE_CXX_TYPE := {trouble_type}
BISECT_LINK      := $(GT_CXX)
RM               := rm -f
RMDIR            := rm -rf

TROUBLE_ID       := {trouble_id}

MAKEFILE         := {makefile}
NUMBER           := {number}
BISECT_DIR       := {bisect_dir}
LOCAL_OBJ_DIR    := $(BISECT_DIR)/obj
FPIC_DIR         := $(LOCAL_OBJ_DIR)/fpic
SPLIT_DIR        := $(LOCAL_OBJ_DIR)/split
SYMBOLS_DIR      := $(LOCAL_OBJ_DIR)/symbols

BISECT_OBJ_DIR   := $(OBJ_DIR)/bisect/$(TROUBLE_ID)
MORE_DIRS        += $(BISECT_DIR)
MORE_DIRS        += $(LOCAL_OBJ_DIR)
MORE_DIRS        += $(FPIC_DIR)
MORE_DIRS        += $(SPLIT_DIR)
MORE_DIRS        += $(SYMBOLS_DIR)
MORE_DIRS        += $(BISECT_OBJ_DIR)
BISECT_TARGET    := $(BISECT_DIR)/runbisect-$(NUMBER)
TROUBLE_TARGET   := $(BISECT_DIR)/runtrouble-$(TROUBLE_ID)

BISECT_GT_SRC    :=
{BISECT_GT_SRC}

TROUBLE_SRC      :=
{TROUBLE_SRC}

SPLIT_SRC        :=
{SPLIT_SRC}

# Add to the CXXFLAGS and LDFLAGS if necessary
{EXTRA_CXXFLAGS}
{EXTRA_LDFLAGS}

TROUBLE_LDFLAGS  :=
TROUBLE_CXXFLAGS :=

ifeq ($(TROUBLE_CXX_TYPE),$(CLANG_TYPE))
  TROUBLE_LDFLAGS += -nopie
  TROUBLE_CXXFLAGS  += $(CLANG_CXXFLAGS)
else ifeq ($(TROUBLE_CXX_TYPE),$(GCC_TYPE))
ifeq ($(call IS_VER_4_OR_5,$(TROUBLE_CXX)),0)
  TROUBLE_LDFLAGS += -no-pie
endif
endif

BUILD_GT_LOCAL   := {build_gt_local}

TROUBLE_TARGET_OBJ := $(addprefix \
    $(BISECT_OBJ_DIR)/,$(notdir $(SOURCE:%=%.o)))
ALL_TROUBLE_FPIC := $(TROUBLE_TARGET_OBJ:%.o=%_fPIC.o)
BISECT_GT_OBJ    := $(addprefix \
    $(GT_OBJ_DIR)/,$(notdir $(BISECT_GT_SRC:%=%.o)))
TROUBLE_OBJ      := $(addprefix \
    $(BISECT_OBJ_DIR)/,$(notdir $(TROUBLE_SRC:%=%.o)))
BISECT_OBJ       := $(BISECT_GT_OBJ)
BISECT_OBJ       += $(TROUBLE_OBJ)
TROUBLE_TARGET_DEPS := $(TROUBLE_TARGET_OBJ:%.o=%.d)
FPIC_OBJ         := $(addprefix \
    $(FPIC_DIR)/,$(notdir $(SPLIT_SRC:%=%_gt_fPIC.o)))
FPIC_OBJ         += $(addprefix \
    $(FPIC_DIR)/,$(notdir $(SPLIT_SRC:%=%_fPIC.o)))
FPIC_DEPS        := $(FPIC_OBJ:%.o=%.d)
SPLIT_OBJ        := $(addprefix \
    $(SPLIT_DIR)/,$(notdir $(SPLIT_SRC:%=%_gt_split_$(NUMBER).o)))
SPLIT_OBJ        += $(addprefix \
    $(SPLIT_DIR)/,$(notdir \
      $(SPLIT_SRC:%=%_trouble_split_$(NUMBER).o)))
SPLIT_DEPS       := $(SPLIT_OBJ:%.o=%.d)
TROUBLE_SYMBOLS  := $(addprefix \
    $(SYMBOLS_DIR)/,$(notdir \
      $(SPLIT_SRC:%=%_trouble_symbols_$(NUMBER).txt)))

TROUBLE_TARGET_OUT := $(TROUBLE_TARGET:%=%-out)
TROUBLE_TARGET_RESULT := $(TROUBLE_TARGET_OUT:%=%-comparison.csv)
BISECT_OUT         := $(BISECT_TARGET:%=%-out)
BISECT_RESULT      := $(BISECT_OUT:%=%-comparison.csv)

# TODO: test this on a mac
ifeq ($(UNAME_S),Darwin)
$(BISECT_TARGET):  lib/libflit.so
$(TROUBLE_TARGET): lib/libflit.so
else
$(BISECT_TARGET):  $(FLIT_LIB_DIR)/libflit.so
$(TROUBLE_TARGET): $(FLIT_LIB_DIR)/libflit.so
endif # ifeq ($(UNAME_S),Darwin): meaning, we are on a mac


# If we want the ground-truth build to be done locally, for example if we have
# added to the $(LDFLAGS) flag and want to recompile the ground-truth
# executable, then simply set BUILD_GT_LOCAL=true.  This generates
# $(BISECT_DIR)/gtrun-lib that will be the ground truth for this bisect
# execution.

GT_LIB_TARGET      := $(BISECT_DIR)/gtrun-lib
GT_LIB_OUT         := $(BISECT_DIR)/gtrun-lib-out

ifeq ($(BUILD_GT_LOCAL),true)

ifeq ($(UNAME_S),Darwin)
$(GT_LIB_TARGET): lib/libflit.so
else
$(GT_LIB_TARGET): $(FLIT_LIB_DIR)/libflit.so
endif # ifeq ($(UNAME_S),Darwin): meaning we are on a mac

$(GT_LIB_OUT): $(GT_LIB_TARGET)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$(GT_LIB_TARGET) --output $(GT_LIB_OUT) --no-timing --precision "$(PRECISION)" $(TEST_CASE)

$(GT_LIB_TARGET): $(GT_OBJ) Makefile custom.mk $(MAKEFILE)
	@$(call color_out,BLUE,Building $@)
	$(GT_CXX) $(CXXFLAGS) -o $@ $(GT_OBJ) $(LDFLAGS) $(LDLIBS)

$(BISECT_RESULT): $(BISECT_OUT) $(GT_LIB_OUT) $(GT_LIB_TARGET)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$(GT_LIB_TARGET) --compare-mode --compare-gt $(GT_LIB_OUT) --suffix "-comparison.csv" $< -o /dev/null

endif # ifeq ($(BUILD_GT_LOCAL),true): meaning we are making a local gt


-include $(TROUBLE_TARGET_DEPS)
-include $(FPIC_DEPS)
-include $(SPLIT_DEPS)

$(BISECT_OUT): $(BISECT_TARGET) | $(BISECT_DIR)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$< --precision "$(PRECISION)" --output $@ $(TEST_CASE) --no-timing
$(TROUBLE_TARGET_OUT): $(TROUBLE_TARGET) | $(BISECT_DIR)
	@$(call color_out,CYAN,  $< -> $@)
	$(RUNWRAP) ./$< --precision "$(PRECISION)" --output $@ $(TEST_CASE) --no-timing

$(BISECT_TARGET): $(BISECT_OBJ) $(SPLIT_OBJ) Makefile custom.mk | $(BISECT_DIR)
	@$(call color_out,BLUE,Building $@)
	$(GT_CXX) $(CXXFLAGS) $(GT_CXXFLAGS) -o $@ $(BISECT_OBJ) $(SPLIT_OBJ) \
	  $(LDFLAGS) $(GT_LDFLAGS) $(LDLIBS)

$(TROUBLE_TARGET): $(TROUBLE_TARGET_OBJ) Makefile custom.mk | $(BISECT_DIR)
	@$(call color_out,BLUE,Building $@)
	$(TROUBLE_CXX) $(CXXFLAGS) $(TROUBLE_CXXFLAGS) -o $@ $(TROUBLE_TARGET_OBJ) \
	  $(LDFLAGS) $(TROUBLE_LDFLAGS) $(LDLIBS)

.PHONY: trouble trouble-out trouble-fpic
trouble: $(TROUBLE_TARGET)
trouble-out: $(TROUBLE_TARGET_RESULT) $(TROUBLE_TARGET_OUT)
trouble-fpic: $(ALL_TROUBLE_FPIC)

.PHONY: bisect
bisect: $(BISECT_TARGET) $(GT_TARGET)
bisect: $(BISECT_RESULT) $(BISECT_OUT)

.PHONY: bisect-smallclean bisect-clean bisect-distclean
clean: bisect-clean
distclean: bisect-distclean
bisect-smallclean:
	$(RM) $(BISECT_TARGET)
	$(RM) $(BISECT_OUT)
	$(RM) $(addsuffix *.dat,$(BISECT_OUT))
	$(RM) $(TROUBLE_TARGET)
	$(RM) $(TROUBLE_TARGET_OUT)
	$(RM) $(addsuffix *.dat,$(TROUBLE_TARGET_OUT))
	$(RMDIR) $(SPLIT_DIR)

bisect-clean: bisect-smallclean
	$(RM) $(TROUBLE_TARGET_OBJ)
	$(RM) $(TROUBLE_TARGET_DEPS)
	$(RM) $(GT_LIB_TARGET)
	$(RM) $(GT_LIB_OUT)
	$(RM) $(addsuffix *.dat,$(GT_LIB_OUT))
	$(RMDIR) $(FPIC_DIR)

bisect-distclean: bisect-clean
	$(RM) bisect.log
	$(RM) $(TROUBLE_TARGET_RESULT)
	$(RM) $(BISECT_RESULT)
	$(RM) $(MAKEFILE)
	$(RMDIR) $(SYMBOLS_DIR)
	$(RMDIR) $(LOCAL_OBJ_DIR)
	-rmdir --ignore-fail-on-non-empty $(BISECT_DIR)

dirs: $(MORE_DIRS)

$(MORE_DIRS):
	@$(call color_out_noline,CYAN,  mkdir)
	@echo " $@"
	+mkdir -p $@

# Copied mostly from Makefile.in COMPILE_RULE, but customized for bisect
# Compiles a single object file with -fPIC, checking first for a precompiled
# version (and if so, copy it instead of recompiling).
# @param 1: source file
# @param 2: object file
# @param 3: other object file location
# @param 4: compiler
# @param 5: optimization level
# @param 6: switches
# @param 7: target filename
# @param 8: extra compiler flags
define FPIC_COMPILE_RULE
$2: $1 Makefile custom.mk | $(FPIC_DIR)
	if [ -f "$3" ]; then \
	  $(call color_out,CYAN,  ../../$(strip $3) -> $@); \
	  ln -s "../../$(strip $3)" "$(strip $2)"; \
	else \
	  $(call color_out,CYAN,  $< -> $@); \
	  $4 $5 $6 -c $8 $(CXXFLAGS) -fPIC $(DEPFLAGS) $(2:%.o=%.d) $1 -o $2 \
	    -DFLIT_HOST='"$(HOSTNAME)"' \
	    -DFLIT_COMPILER='"$(strip $4)"' \
	    -DFLIT_OPTL='"$(strip $5)"' \
	    -DFLIT_SWITCHES='"$(strip $6)"' \
	    -DFLIT_FILENAME='"$(notdir $(strip $7))"'; \
	fi
endef

$(foreach s,$(SOURCE),\
  $(eval $(call FPIC_COMPILE_RULE,\
    $s,\
    $(FPIC_DIR)/$(notdir $s)_gt_fPIC.o,\
    $(GT_OBJ_DIR)/$(notdir $s)_fPIC.o,\
    $(GT_CXX),\
    $(GT_OPTL),\
    $(GT_SWITCHES),\
    $(GT_TARGET),\
    $(GT_CXXFLAGS))))

# specify how to build the troublesome ones
$(foreach s,$(SOURCE),\
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(BISECT_OBJ_DIR)/$(notdir $s).o,\
    $(TROUBLE_CXX),\
    $(TROUBLE_OPTL),\
    $(TROUBLE_SWITCHES),\
    bisect-default-out,\
    $(TROUBLE_CXXFLAGS))))

# and the fPIC variant
$(foreach s,$(SOURCE),\
  $(eval $(call FPIC_COMPILE_RULE,\
    $s,\
    $(FPIC_DIR)/$(notdir $s)_fPIC.o,\
    $(BISECT_OBJ_DIR)/$(notdir $s)_fPIC.o,\
    $(TROUBLE_CXX),\
    $(TROUBLE_OPTL),\
    $(TROUBLE_SWITCHES),\
    bisect-default-out,\
    $(TROUBLE_CXXFLAGS))))

# The fPIC variant built in OBJ_DIR instead of FPIC_DIR
$(foreach s,$(SOURCE),\
  $(eval $(call COMPILE_RULE,\
    $s,\
    $(BISECT_OBJ_DIR)/$(notdir $s)_fPIC.o,\
    $(TROUBLE_CXX),\
    $(TROUBLE_OPTL),\
    $(TROUBLE_SWITCHES),\
    bisect-default-out,\
    $(TROUBLE_CXXFLAGS))))

# Specify how to split symbols using objcopy

# Defines how to split the one object file into two object files using objcopy
# @param 1: src basename (e.g. for 'tests/Example01.cpp' pass in
#     'Example01.cpp')
define SPLIT_RULE

$$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o: $$(FPIC_DIR)/$1_gt_fPIC.o
$$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o: $$(SYMBOLS_DIR)/$1_trouble_symbols_$$(NUMBER).txt
$$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o: $$(MAKEFILE)
$$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o: | $$(SPLIT_DIR)
  @$$(call color_out,CYAN,  $$(SPLIT_DIR)/$1_gt_fPIC.o -> $1_gt_split_$$(NUMBER).o)
	if [ -s "$$(SYMBOLS_DIR)/$1_trouble_symbols_$$(NUMBER).txt" ]; then \
	  objcopy \
	    --weaken-symbols=$$(SYMBOLS_DIR)/$1_trouble_symbols_$$(NUMBER).txt \
	    $$(FPIC_DIR)/$1_gt_fPIC.o \
	    $$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o; \
	else \
	  cp \
	    $$(FPIC_DIR)/$1_gt_fPIC.o \
	    $$(SPLIT_DIR)/$1_gt_split_$$(NUMBER).o; \
	fi

$$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o: $$(FPIC_DIR)/$1_fPIC.o
$$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o: $$(MAKEFILE)
$$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o: $$(SYMBOLS_DIR)/$1_gt_symbols_$$(NUMBER).txt
$$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o: | $$(SPLIT_DIR)
  @$$(call color_out,CYAN,  $$(SPLIT_DIR)/$1_fPIC.o -> $1_trouble_split_$$(NUMBER).o)
	if [ -s "$$(SYMBOLS_DIR)/$1_gt_symbols_$$(NUMBER).txt" ]; then \
	  objcopy \
	    --weaken-symbols=$$(SYMBOLS_DIR)/$1_gt_symbols_$$(NUMBER).txt \
	    $$(FPIC_DIR)/$1_fPIC.o \
	    $$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o; \
	else \
	  cp \
	    $$(FPIC_DIR)/$1_fPIC.o \
	    $$(SPLIT_DIR)/$1_trouble_split_$$(NUMBER).o; \
	fi

endef

$(foreach s, $(notdir $(SPLIT_SRC:%=%)), \
  $(eval $(call SPLIT_RULE,$s)))
