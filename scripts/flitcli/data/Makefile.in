# Autogenerated Makefile using "flit update"

DEV_CC          := {compiler}
FFLAGS          ?=
DEV_TARGET      ?= devrun
DEV_CUTARGET    ?= cu_devrun

UNAME_S         := $(shell uname -s)

FLIT_INC_DIR    := {flit_include_dir}
FLIT_LIB_DIR    := {flit_lib_dir}
FLIT_SCRIPT     := {flit_script}

CC_REQUIRED     += $(FFLAGS)
CC_REQUIRED     += -std=c++11
CC_REQUIRED     += -I.
CC_REQUIRED     += -I$(FLIT_INC_DIR)

DEV_CFLAGS      += -g
DEV_CFLAGS      += -Wall
DEV_CFLAGS      += -Wextra
DEV_CFLAGS      += -Wuninitialized
DEV_CFLAGS      += -Wno-shift-count-overflow

LD_REQUIRED     += -lm
LD_REQUIRED     += -lstdc++
ifeq ($(UNAME_S),Darwin) # If we are on a Mac OSX system
  LD_REQUIRED   += -Llib -lflit
else
  LD_REQUIRED   += -L$(FLIT_LIB_DIR) -lflit
  LD_REQUIRED   += -Wl,-rpath=$(realpath $(FLIT_LIB_DIR))
endif
LD_REQUIRED     += -Llib -lflit

DEV_LDFLAGS     +=

DEPFLAGS        += -MD -MF $*_dev.d

TESTS           := $(wildcard tests/*.cpp)
SOURCE          := $(wildcard *.cpp)
SOURCE          += $(TESTS)

DEV_OBJ         := $(SOURCE:%.cpp=%_dev.o)
DEV_DEPS        := $(SOURCE:%.cpp=%_dev.d)

CLANG           := clang++
INTEL           := icpc
GCC             := g++

ifndef CUDA_ONLY
COMPILERS       := $(foreach c, GCC INTEL CLANG, $(if $(shell which $($(c))), $c,))
endif

ifdef CLANG_ONLY
COMPILERS        = CLANG
endif

HOSTNAME        := $(shell hostname)

RESULTS_DIR     := results

# on systems with non-standard gcc installations (such as module), clang may
# be unable to determine the correct gcc toolchain
GCC_TOOLCHAIN   := $(dir $(dir $(shell which $(GCC))))
CLANG_REQUIRED  := --gcc-toolchain=$(GCC_TOOLCHAIN)

# Compiler setting targets
#   taken from: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
#   among other places
# more comp settings, taken from here:
# https://software.intel.com/sites/default/files/article/326703/fp-control-2012-08.pdf
# see psql: qfp: switch_desc for description of flags
# also, psql: qfp:

#individual flags
## optls

O0              := -O0
O1              := -O1
O2              := -O2
O3              := -O3

#switches

ASSOCMATH       := -fassociative-math
AVX             := -mavx
COMPTRANS       := -mp1
DEFFLAGS        :=
DISFMA          := -no-fma
ENAFMA          := -fma
FASTEXPREC      := -fexcess-precision=fast
FASTM           := -ffast-math
FINMATH         := -ffinite-math-only
FLUSHDEN        := -ftz
FMAGCC          := -mavx2 -mfma
FMAICC          := -march=core-avx2
FORTRULES       := -fcx-fortran-rules
FPCONT          := -ffp-contract=on
FPMODDBL        := -fp-model=double
FPMODEXC        := -fp-model=except
FPMODEXT        := -fp-model=extended
FPMODFST1       := -fp-model fast=1
FPMODFST2       := -fp-model fast=2
FPMODPRE        := -fp-model=precise
FPMODSRC        := -fp-model=source
FPMODSTR        := -fp-model=strict
FPTRAP          := -fp-trap=common
FSTORE          := -ffloat-store
LIMITEDRANGE    := -fcx-limited-range
MCONSTS         := -fmerge-all-constants
NOFLUSHDEN      := -no-ftz
NOPRECDIV       := -no-prec-div
NOTRAP          := -fno-trapping-math
PRECDIV         := -prec-div
RECIPMATH       := -freciprocal-math
ROUNDINGMATH    := -frounding-math
ROUNDUSR        := -fp-port
SIGNALNAN       := -fsignaling-nans
SINGLEPRECCONST := -fsingle-precision-constant
SSE             := -mfpmath=sse -mtune=native
STDEXPREC       := -fexcess-precision=standard
UNSOPTS         := -funsafe-math-optimizations
USEFASTM        := --use_fast_math

# Collections

OPCODES         := O0 O1 O2 O3

# NOTE: gcc disables ASSOCMATH @ O0
SWITCHES_GCC    += ASSOCMATH
SWITCHES_GCC    += AVX
SWITCHES_GCC    += DEFFLAGS
SWITCHES_GCC    += FASTEXPREC
#SWITCHES_GCC    += FINMATH
#SWITCHES_GCC    += FMAGCC
#SWITCHES_GCC    += FORTRULES
#SWITCHES_GCC    += FPCONT
#SWITCHES_GCC    += FSTORE
#SWITCHES_GCC    += LIMITEDRANGE
#SWITCHES_GCC    += MCONSTS
#SWITCHES_GCC    += NOTRAP
#SWITCHES_GCC    += RECIPMATH
#SWITCHES_GCC    += ROUNDINGMATH
#SWITCHES_GCC    += SIGNALNAN
#SWITCHES_GCC    += SSE
#SWITCHES_GCC    += UNSOPTS

#NOTE: Clang not honoring ASSOCMATH (issues warning with 3.9)
# see: https://llvm.org/bugs/show_bug.cgi?id=27372

SWITCHES_CLANG  += ASSOCMATH
SWITCHES_CLANG  += AVX
SWITCHES_CLANG  += DEFFLAGS
SWITCHES_CLANG  += FASTEXPREC
SWITCHES_CLANG  += FINMATH
SWITCHES_CLANG  += FMAGCC
SWITCHES_CLANG  += FMAICC
SWITCHES_CLANG  += FPCONT
SWITCHES_CLANG  += FSTORE
SWITCHES_CLANG  += MCONSTS
SWITCHES_CLANG  += NOTRAP
SWITCHES_CLANG  += RECIPMATH
SWITCHES_CLANG  += ROUNDINGMATH
SWITCHES_CLANG  += SIGNALNAN
SWITCHES_CLANG  += SINGLEPRECCONST
SWITCHES_CLANG  += SSE
SWITCHES_CLANG  += STDEXPREC
SWITCHES_CLANG  += UNSOPTS

SWITCHES_INTEL  += AVX
SWITCHES_INTEL  += COMPTRANS
SWITCHES_INTEL  += DEFFLAGS
SWITCHES_INTEL  += DISFMA
SWITCHES_INTEL  += ENAFMA
SWITCHES_INTEL  += FLUSHDEN
SWITCHES_INTEL  += FMAGCC
SWITCHES_INTEL  += FMAICC
SWITCHES_INTEL  += FPMODDBL
SWITCHES_INTEL  += FPMODEXT
SWITCHES_INTEL  += FPMODFST1
SWITCHES_INTEL  += FPMODFST2
SWITCHES_INTEL  += FPMODPRE
SWITCHES_INTEL  += FPMODSRC
SWITCHES_INTEL  += FPMODSTR
SWITCHES_INTEL  += FSTORE
SWITCHES_INTEL  += LIMITEDRANGE
SWITCHES_INTEL  += MCONSTS
SWITCHES_INTEL  += NOFLUSHDEN
SWITCHES_INTEL  += NOPRECDIV
SWITCHES_INTEL  += PRECDIV
SWITCHES_INTEL  += ROUNDINGMATH
SWITCHES_INTEL  += ROUNDUSR
SWITCHES_INTEL  += SINGLEPRECCONST
SWITCHES_INTEL  += SSE
SWITCHES_INTEL  += USEFASTM

TARGETS         := $(foreach c, $(COMPILERS), \
                     $(foreach s, $(SWITCHES_$(strip $c)), \
                       $(foreach o, $(OPCODES), \
                         $c_$(HOSTNAME)_$(strip $(s))_$(strip $(o))_out \
                        ) \
                      ) \
                    )
BIN             := $(TARGETS:%_out=%)
OBJ              = $(foreach b,$(BIN),$(SOURCE:%.cpp=%_$(strip $(b)).o))

##################################################
#
# Now deal with CUDA stuff if it is even available
#
##################################################
NVCC_BIN        := nvcc
NVCC            := $(shell which $(NVCC_BIN))

HAS_CUDA        := $(shell command -v $(NVCC_BIN) 2> /dev/null)
ifdef HAS_CUDA

NVCC_CFLAGS     += --std=c++11
NVCC_CFLAGS     += -ccbin=g++
NVCC_CFLAGS     += $(DEVCAP)
NVCC_CFLAGS     += -I .
NVCC_CFLAGS     += -x cu
NVCC_CFLAGS     += -dc
NVCC_CFLAGS     += -D__CUDA__
NVCC_CFLAGS     += -I/usr/local/cuda/samples/common/inc

NVCC_LINK       += --std=c++11
NVCC_LINK       += -ccbin=g++
NVCC_LINK       += $(DEVCAP)
NVCC_LINK       += -L/usr/local/cuda/lib64

DEV_NVCC_CC     +=
DEV_NVCC_LD     +=

CUSOURCE        += $(TESTS)
CUSOURCE        += $(wildcard *.cpp)
# TODO: use DEV_CUOBJ.  It is not yet used
DEV_CUOBJ       += $(CUSOURCE:%.cpp=%_cu_dev.o)

# These are the fp affecting switches for CUDA (7.5).
# We will naively apply these (though the docs say
# that, for instance, --use_fast_math implies
# --ftz=true --prec-div=false --prec-sqrt=false
# --fmad=true.

FASTMC          := --use_fast_math
FMADFC          := --fmad=false
FMADTC          := --fmad=true
FTZFC           := --ftz=false
FTZTC           := --ftz=true
PRECDFC         := --prec-div=false
PRECDTC         := --prec-div=true
PRECSFC         := --prec-sqrt=false
PRECSTC         := --prec-sqrt=true

CUSWITCHES      += FASTMC
CUSWITCHES      += FTZTC
CUSWITCHES      += FTZFC
CUSWITCHES      += PRECDTC
CUSWITCHES      += PRECDFC
CUSWITCHES      += PRECSTC
CUSWITCHES      += PRECSFC
CUSWITCHES      += FMADTC
CUSWITCHES      += FMADFC

CUTARGETS       := $(foreach s, $(CUSWITCHES), \
                     NVCC_$(HOSTNAME)_$(strip $(s))_out)
CUBIN           := $(CUTARGETS:%_out=%)
CUOBJ           := $(foreach b,$(CUBIN),$(CUSOURCE:%.cpp=%_$b.o))

endif # ifdef HAS_CUDA


.PHONY: help
help:
	@echo 'You can run the Makefile directly, but it is recommended to use'
	@echo
	@echo '  flit make'
	@echo
	@echo 'so that you can have functionality such as adding the results to a'
	@echo 'database.'
	@echo
	@echo 'The following targets are available:'
	@echo
	@echo '  help        Show this help and exit (default target)'
	@echo '  dev         Only run the devel compilation to test things out'
	@echo '  devcuda     Only run the devel CUDA compilation to test CUDA out'
	@echo '  run         Run all combinations of compilation, results in results/'
	@echo '  clean       Clean intermediate files'
	@echo '  veryclean   Runs clean + removes targets and results'
	@echo '  distclean   Same as veryclean'
	@echo

.PHONY: dev devcuda run
dev: $(DEV_TARGET)
devcuda: $(DEV_CUTARGET)
run: $(TARGETS) $(CUTARGETS) cleanResults archive

.PHONY: clean
clean:
	rm -f $(DEV_OBJ)
	rm -f $(DEV_DEPS)
	rm -f $(DEV_CUOBJ)
	rm -f $(TARGETS)
	rm -f $(CUTARGETS)
	rm -f $(BIN)
	rm -f $(OBJ)
	rm -f $(CUBIN)
	rm -f $(CUOBJ)

.PHONY: veryclean distclean
veryclean: distclean
distclean: clean
	rm -f $(DEV_TARGET)
	rm -f $(DEV_CUTARGET)
	rm -f $(TARGETS:%=$(RESULTS_DIR)/%)
	rm -f $(BIN:%=$(RESULTS_DIR)/%)
	rm -f $(CUTARGETS:%=$(RESULTS_DIR)/%)
	rm -f $(CUBIN:%=$(RESULTS_DIR)/%)
	-rmdir $(RESULTS_DIR)

.PRECIOUS: %.d
-include $(SOURCE:%.cpp=%.d)

Makefile: flit-config.toml
	$(FLIT_SCRIPT) update

# We have a different solution if we are on a mac
ifeq ($(UNAME_S),Darwin)
lib/libflit.so: $(FLIT_LIB_DIR)/libflit.so
	mkdir -p lib
	cp $< $@

.PHONY: cleanlibflit
distclean: cleanlibflit
cleanlibflit:
	rm -rf lib

$(DEV_TARGET): lib/libflit.so
$(BIN): lib/libflit.so
$(CUBIN): lib/libflit.so
endif # ifeq ($(UNAME_S),Darwin): meaning, we are on a mac


#
# Now for the compilation rules:
#

# Dev compilation rules first (easier to understand)
$(DEV_TARGET): $(DEV_OBJ) Makefile
	$(DEV_CC) $(CC_REQUIRED) $(DEV_CFLAGS) \
	  -o $@ $(DEV_OBJ) $(LD_REQUIRED) $(DEV_LDFLAGS)

%_dev.o: %.cpp Makefile
	$(DEV_CC) $(CC_REQUIRED) $(DEV_CFLAGS) $(DEPFLAGS) -c $< -o $@

ifdef HAS_CUDA
$(DEV_CUTARGET): $(DEV_CUOBJ) Makefile
	$(NVCC) $(NVCC_LINK) $(DEV_NVCC_LD) $(DEV_CUOBJ) -o $(DEV_CUTARGET)

%_cu_dev.o: %.cpp
	$(NVCC) -c $(NVCC_CFLAGS) $(DEV_NVCC_CC) $< -o $@
endif # ifdef HAS_CUDA

# Now the true magic begins for the full run compilation rules
# very cool: recyclable target definitions! adapted from
# http://make.mad-scientist.net/the-eval-function/


# Generates rules for
#   1. compiling
#   2. running
#   3. replacing placeholders in output
# for a single target from TARGETS.
#
# @param $1: variable name containing compiler switch(es) for this compilation
#            (e.g. UNSOPTS for --funsafe-math-optimizations)
# @param $2: variable name containing the compiler to use (e.g. GCC)
# @param $3: variable name containing the optimization level (e.g. O2)
define TARGETS_RULE
#run test and collect results
$(strip $2)_$(HOSTNAME)_$(strip $1)_$(strip $3)_out : $2_$(HOSTNAME)_$(strip $1)_$(strip $3)
	-./$$< > $$@
	-sed -i -e 's/HOST/$(HOSTNAME)/g' $$@
	-sed -i -e 's/SWITCHES/$($(strip $1))/g' $$@
	-sed -i -e 's/OPTL/$($(strip $3))/g' $$@
	-sed -i -e 's/COMPILER/$($(strip $2))/g' $$@
	-sed -i -e 's/FILENAME/$$</g' $$@
	@# Remove backup files from older versions of sed
	rm -f $$@-e

#link
$(strip $2)_$(HOSTNAME)_$(strip $1)_$(strip $3) : $(SOURCE:%.cpp=%_$(strip $2)_$(HOSTNAME)_$(strip $1)_$(strip $3).o)
	-$($(strip $2)) $($(strip $1)) $($(strip $3)) $($(strip $2)_REQUIRED)\
	 $(CC_REQUIRED) $$^ -o $$@ $(LD_REQUIRED)
	-rm $(SOURCE:.cpp=_$(strip $2)_$(HOSTNAME)_$(strip $1)_$(strip $3).o)

#compile
%_$(strip $2)_$(HOSTNAME)_$(strip $1)_$(strip $3).o : %.cpp
	-$($(strip $2)) -c $($(strip $1)) $($(strip $3)) $(CC_REQUIRED) \
	$($(strip $2)_REQUIRED) $$< -o $$@
endef
# end of define TARGETS_RULE

# Define individual rules for all elements of $(TARGETS)
$(foreach c, $(COMPILERS), \
  $(foreach s, $(SWITCHES_$(strip $c)), \
    $(foreach o, $(OPCODES), \
      $(eval $(call TARGETS_RULE, $s, $c, $o)))))


# Generates rules for
#   1. compiling
#   2. running
#   3. replacing placeholders in output
# for a single target from CUTARGETS.
#
# @param $1: variable name containing compiler switch(es) for this compilation
#            (e.g. UNSOPTS for --funsafe-math-optimizations)
define CUTARGETS_RULE
#run test
NVCC_$(HOSTNAME)_$(strip $1)_out : NVCC_$(HOSTNAME)_$(strip $1)
	./$$< > $$@
	-sed -i -e 's/HOST/$(HOSTNAME)/g' $$@
	-sed -i -e 's/SWITCHES/$($(strip $1))/g' $$@
	-sed -i -e 's/OPTL//g' $$@
	-sed -i -e 's/COMPILER/NVCC/g' $$@
	-sed -i -e 's/FILENAME/$$</g' $$@
	@# Remove backup files from older versions of sed
	rm -f $$@-e

#link test
NVCC_$(HOSTNAME)_$(strip $1) : $(CUSOURCE:%.cpp=%_NVCC_$(HOSTNAME)_$(strip $1).o)
	$(NVCC) $($(strip $1)) $(NVCC_LINK) $$^ -o $$@
	rm $(CUSOURCE:%.cpp=%_NVCC_$(HOSTNAME)_$(strip $1).o)

#compile test
%_NVCC_$(HOSTNAME)_$(strip $1).o : %.cpp
	-$(NVCC) -c $($(strip $1)) $(NVCC_CFLAGS) $$< -o $$@
endef
# end of def CUTARGETS_RULE

# define individual rules for all elements of $(CUTARGETS)
$(foreach s, $(CUSWITCHES), $(eval $(call CUTARGETS_RULE, $s)))

# strip excess info from Intel output (__file__) and remove emtpy outputs
.PHONY : cleanResults
cleanResults : $(TARGETS) $(CUTARGETS)
	sed -i -e 's/FPTests:://' *_$(HOSTNAME)_*_out
	@# Remove backup files from older versions of sed
	rm -f *_$(HOSTNAME)_*_out-e

.PHONY : archive
archive : cleanResults
	mkdir -p $(RESULTS_DIR)
	mv *$(HOSTNAME)* $(RESULTS_DIR)

-include custom.mk
