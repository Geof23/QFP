# Autogenerated Makefile using "flit update"

DEV_CC         := {compiler}
FFLAGS         ?=
DEV_TARGET     ?= runTests

UNAME_S        := $(shell uname -s)

FLIT_INC_DIR   := {flit_include_dir}
FLIT_LIB_DIR   := {flit_lib_dir}
FLIT_SCRIPT    := {flit_script}

CC_REQUIRED    += $(FFLAGS)
CC_REQUIRED    += -std=c++11
CC_REQUIRED    += -I.
CC_REQUIRED    += -I$(FLIT_INC_DIR)

DEV_CFLAGS     += -g
DEV_CFLAGS     += -Wall
DEV_CFLAGS     += -Wextra
DEV_CFLAGS     += -Wuninitialized
DEV_CFLAGS     += -Wno-shift-count-overflow

LD_REQUIRED    += -lm
ifeq ($(UNAME_S),Darwin)
  LD_REQUIRED    += -Llib -lflit
else
  LD_REQUIRED    += -L$(FLIT_LIB_DIR) -lflit
  LD_REQUIRED    += -Wl,-rpath=$(realpath $(FLIT_LIB_DIR))
endif
LD_REQUIRED    += -Llib -lflit

DEV_LDFLAGS    +=

NVCC_REQUIRED  += --std=c++11
NVCC_REQUIRED  += -ccbin=g++
DEVCAP         ?= -arch=compute_37 -code=sm_37
NVCC_REQUIRED  += $(DEVCAP)

DEPFLAGS       += -MD -MF $*_dev.d

TESTS          := $(wildcard tests/*.cpp)
SOURCE         := $(wildcard *.cpp)
SOURCE         += $(TESTS)

DEV_OBJ        := $(SOURCE:%.cpp=%_dev.o)
DEV_DEPS       := $(SOURCE:%.cpp=%_dev.d)

HAS_CUDA       := $(shell command -v nvcc 2> /dev/null)

NVCC           := $(shell which nvcc)
CLANG          := clang++
INTEL          := icpc
GCC            := g++

ifndef CUDA_ONLY
COMPILERS      := $(foreach c, GCC INTEL CLANG, $(if $(shell which $($(c))), $c,))
endif

ifdef CLANG_ONLY
COMPILERS       = CLANG
endif

.PHONY: help
help:
	@echo 'You can run the Makefile directly, but it is recommended to use'
	@echo
	@echo '  flit make'
	@echo
	@echo 'so that you can have functionality such as adding the results to a'
	@echo 'database.'
	@echo
	@echo 'The following targets are available:'
	@echo
	@echo '  help        Show this help and exit (default target)'
	@echo '  dev         Only run the devel compilation to test things out'
	@echo '  devcuda     Only run the devel CUDA compilation to test CUDA out'
	@echo '  run         Run all combinations of compilation, results in results/'
	@echo '  clean       Clean intermediate files'
	@echo '  veryclean   Runs clean + removes targets and results'
	@echo '  distclean   Same as veryclean'
	@echo

.PHONY: dev
dev: $(DEV_TARGET)

$(DEV_TARGET): $(DEV_OBJ) Makefile
	$(DEV_CC) $(CC_REQUIRED) $(DEV_CFLAGS) \
	  -o $@ $(DEV_OBJ) $(LD_REQUIRED) $(DEV_LDFLAGS)

%_dev.o: %.cpp Makefile
	$(DEV_CC) $(CC_REQUIRED) $(DEV_CFLAGS) $(DEPFLAGS) -c $< -o $@

.PRECIOUS: %.d
-include $(SOURCE:%.cpp=%.d)

.PHONY: clean
clean:
	rm -f $(DEV_OBJ)
	rm -f $(DEV_DEPS)

.PHONY: veryclean distclean
veryclean: distclean
distclean: clean
	rm -f $(DEV_TARGET)

Makefile: flit-config.toml
	$(FLIT_SCRIPT) update

# We have a different solution if we are on a mac
ifeq ($(UNAME_S),Darwin)
lib/libflit.so: $(FLIT_LIB_DIR)/libflit.so
	mkdir -p lib
	cp $< $@

.PHONY: cleanlibflit
distclean: cleanlibflit
cleanlibflit:
	rm -rf lib

$(DEV_TARGET): lib/libflit.so
endif

-include custom.mk
